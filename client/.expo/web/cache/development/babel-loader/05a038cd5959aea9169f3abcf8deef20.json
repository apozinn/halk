{"ast":null,"code":"import React, { useContext, useEffect } from \"react\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { UserContext } from \"../../src/contexts/user\";\nimport { ChatsContext } from \"../../src/contexts/chats\";\nimport { Text } from \"../../src/components/Themed\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport NewChatButton from \"../../src/components/newChat\";\nimport { getColors } from \"../../constants/Colors\";\nimport Socket, { CreateSocketConnection } from \"../../src/utils/socket\";\nimport { Decipher } from \"../../middleware/crypto\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function Chats(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(UserContext),\n      user = _useContext.user,\n      logged = _useContext.logged,\n      updateUser = _useContext.updateUser;\n\n  var _useContext2 = useContext(ChatsContext),\n      chats = _useContext2.chats,\n      updateChats = _useContext2.updateChats;\n\n  var colors = getColors();\n  useEffect(function () {\n    var socketConnection = CreateSocketConnection({\n      userId: user.id\n    });\n    socketConnection.on(\"newChat\", function (_ref2) {\n      var newChat = _ref2.newChat;\n\n      if (newChat) {\n        chats.push(newChat);\n        updateChats({\n          chats: chats\n        });\n      }\n    });\n    socketConnection.on(\"receiveMessage\", function (msg) {\n      if (msg) {\n        var thisChat = chats.filter(function (c) {\n          return c.user.id === msg.author.id;\n        })[0];\n\n        if (thisChat) {\n          if (thisChat.key) {\n            msg.content = Decipher(msg.content, thisChat.key);\n          } else msg.content = \"Falha na descriptografia.\";\n\n          if (thisChat.messages.has(function (m) {\n            return m.id === msg.id;\n          })) return;\n          thisChat.messages.push(msg);\n          updateChats({\n            chats: chats\n          });\n        }\n      }\n    });\n    chats.map(function (c) {\n      return socketConnection.emit(c.id);\n    });\n  }, []);\n\n  function ChatContainer(_ref3) {\n    var chat = _ref3.chat;\n    if (!chat.id) return;\n    var lastMessage = chat.messages[chat.messages.length - 1];\n    if (!lastMessage) return null;\n    var unredMessages = chat.messages.filter(function (m) {\n      return !m.read;\n    });\n    var messageTime = new Date(lastMessage.createdAt).toLocaleTimeString();\n    return _jsxs(Pressable, {\n      style: function style(_ref4) {\n        var pressed = _ref4.pressed;\n        return [styles.chat, {\n          backgroundColor: pressed ? colors.defaultColors.card : \"transparent\"\n        }];\n      },\n      onPress: function onPress() {\n        return navigation.navigate(\"Chat\", {\n          id: chat.id\n        });\n      },\n      children: [_jsxs(View, {\n        style: styles.leftContent,\n        children: [_jsx(Image, {\n          source: {\n            uri: chat.user.profile.avatar\n          },\n          style: styles.userIcon\n        }), _jsxs(View, {\n          style: {\n            justifyContent: \"center\"\n          },\n          children: [_jsx(Text, {\n            style: styles.username,\n            children: chat.user.profile.name\n          }), lastMessage.author.id === user.id ? _jsxs(View, {\n            style: {\n              flexDirection: \"row\",\n              alignItems: \"flex-end\"\n            },\n            children: [_jsx(Ionicons, {\n              name: \"checkmark-done\",\n              size: 20,\n              color: \"gray\",\n              style: {\n                marginRight: 2\n              }\n            }), _jsx(Text, {\n              style: styles.messageContent,\n              children: lastMessage.content.length > 28 ? lastMessage.content.slice(0, 28) + \"...\" : lastMessage.content\n            })]\n          }) : _jsx(Text, {\n            children: lastMessage.content.length > 30 ? lastMessage.content.slice(0, 30) + \"...\" : lastMessage.content\n          })]\n        })]\n      }), _jsxs(View, {\n        style: styles.rightContent,\n        children: [_jsx(Text, {\n          style: styles.messageDate,\n          children: messageTime.slice(0, 5)\n        }), !unredMessages.length ? _jsx(_Fragment, {}) : _jsx(Text, {\n          style: styles.unread,\n          children: unredMessages.length\n        })]\n      })]\n    });\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [!logged ? _jsx(_Fragment, {\n      children: navigation.navigate(\"Welcome\")\n    }) : _jsx(ScrollView, {\n      style: {\n        padding: 5\n      },\n      children: !chats.length ? _jsx(ChatContainer, {\n        chat: new Socket.sendHalkMessage()\n      }) : _jsx(_Fragment, {\n        children: chats.map(function (chat, index) {\n          return _jsx(ChatContainer, {\n            chat: chat\n          }, index);\n        })\n      })\n    }), _jsx(NewChatButton, {\n      navigation: navigation\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  chat: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    borderRadius: 10,\n    padding: 5\n  },\n  leftContent: {\n    flexDirection: \"row\"\n  },\n  userIcon: {\n    width: 50,\n    height: 50,\n    borderRadius: 100,\n    marginRight: 10\n  },\n  username: {\n    fontWeight: \"bold\"\n  },\n  messageContent: {\n    fontSize: 13,\n    opacity: 0.7,\n    alignItems: \"center\"\n  },\n  rightContent: {\n    alignItems: \"center\"\n  },\n  messageDate: {\n    fontSize: 11,\n    marginBottom: 3\n  },\n  unread: {\n    backgroundColor: \"#2f95dc\",\n    borderRadius: 100,\n    minWidth: 15,\n    minHeight: 15,\n    textAlign: \"center\",\n    color: \"white\"\n  }\n});","map":{"version":3,"names":["React","useContext","useEffect","UserContext","ChatsContext","Text","Ionicons","NewChatButton","getColors","Socket","CreateSocketConnection","Decipher","Chats","navigation","user","logged","updateUser","chats","updateChats","colors","socketConnection","userId","id","on","newChat","push","msg","thisChat","filter","c","author","key","content","messages","has","m","map","emit","ChatContainer","chat","lastMessage","length","unredMessages","read","messageTime","Date","createdAt","toLocaleTimeString","pressed","styles","backgroundColor","defaultColors","card","navigate","leftContent","uri","profile","avatar","userIcon","justifyContent","username","name","flexDirection","alignItems","marginRight","messageContent","slice","rightContent","messageDate","unread","container","padding","sendHalkMessage","index","StyleSheet","create","flex","borderRadius","width","height","fontWeight","fontSize","opacity","marginBottom","minWidth","minHeight","textAlign","color"],"sources":["/home/samuel/Documentos/projetos/mobile/halk/client/screens/app/chats.tsx"],"sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport { Pressable, View, StyleSheet, ScrollView, Image } from \"react-native\";\nimport { RootTabScreenProps } from \"../../types\";\nimport { UserContext } from \"../../src/contexts/user\";\nimport { ChatsContext } from \"../../src/contexts/chats\";\nimport { Text } from \"../../src/components/Themed\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport NewChatButton from \"../../src/components/newChat\";\nimport { getColors } from \"../../constants/Colors\";\nimport Socket, { CreateSocketConnection } from \"../../src/utils/socket\";\nimport { Cipher, Decipher } from \"../../middleware/crypto\";\n\nexport default function Chats({ navigation }: RootTabScreenProps<\"Chats\">) {\n  const { user, logged, updateUser } = useContext(UserContext);\n  const { chats, updateChats } = useContext(ChatsContext);\n  const colors = getColors();\n\n  useEffect(() => {\n    const socketConnection = CreateSocketConnection({ userId: user.id });\n    socketConnection.on(\"newChat\", ({ newChat }) => {\n      if (newChat) {\n        chats.push(newChat);\n        updateChats({ chats });\n      }\n    });\n    socketConnection.on(\"receiveMessage\", (msg) => {\n      if (msg) {\n        const thisChat = chats.filter((c) => c.user.id === msg.author.id)[0];\n        if (thisChat) {\n          if (thisChat.key) {\n            msg.content = Decipher(msg.content, thisChat.key);\n          } else msg.content = \"Falha na descriptografia.\";\n\n          if (thisChat.messages.has((m) => m.id === msg.id)) return;\n          thisChat.messages.push(msg);\n          updateChats({ chats });\n        }\n      }\n    });\n\n    chats.map((c) => socketConnection.emit(c.id));\n  }, []);\n\n  function ChatContainer({ chat }) {\n    if (!chat.id) return;\n    const lastMessage = chat.messages[chat.messages.length - 1];\n    if (!lastMessage) return null;\n    const unredMessages = chat.messages.filter((m) => !m.read);\n    const messageTime = new Date(lastMessage.createdAt).toLocaleTimeString();\n\n    return (\n      <Pressable\n        style={({ pressed }) => [\n          styles.chat,\n          {\n            backgroundColor: pressed\n              ? colors.defaultColors.card\n              : \"transparent\",\n          },\n        ]}\n        onPress={() =>\n          navigation.navigate(\"Chat\", {\n            id: chat.id,\n          })\n        }\n      >\n        <View style={styles.leftContent}>\n          <Image\n            source={{ uri: chat.user.profile.avatar }}\n            style={styles.userIcon}\n          />\n          <View style={{ justifyContent: \"center\" }}>\n            <Text style={styles.username}>{chat.user.profile.name}</Text>\n            {lastMessage.author.id === user.id ? (\n              <View style={{ flexDirection: \"row\", alignItems: \"flex-end\" }}>\n                <Ionicons\n                  name=\"checkmark-done\"\n                  size={20}\n                  color=\"gray\"\n                  style={{ marginRight: 2 }}\n                />\n                <Text style={styles.messageContent}>\n                  {lastMessage.content.length > 28\n                    ? lastMessage.content.slice(0, 28) + \"...\"\n                    : lastMessage.content}\n                </Text>\n              </View>\n            ) : (\n              <Text>\n                {lastMessage.content.length > 30\n                  ? lastMessage.content.slice(0, 30) + \"...\"\n                  : lastMessage.content}\n              </Text>\n            )}\n          </View>\n        </View>\n        <View style={styles.rightContent}>\n          <Text style={styles.messageDate}>{messageTime.slice(0, 5)}</Text>\n          {!unredMessages.length ? (\n            <></>\n          ) : (\n            <Text style={styles.unread}>{unredMessages.length}</Text>\n          )}\n        </View>\n      </Pressable>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {!logged ? (\n        <>{navigation.navigate(\"Welcome\")}</>\n      ) : (\n        <ScrollView style={{ padding: 5 }}>\n          {!chats.length ? (\n            <ChatContainer chat={new Socket.sendHalkMessage()} />\n          ) : (\n            <>\n              {chats.map((chat, index) => (\n                <ChatContainer chat={chat} key={index} />\n              ))}\n            </>\n          )}\n        </ScrollView>\n      )}\n      <NewChatButton navigation={navigation} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  chat: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    borderRadius: 10,\n    padding: 5,\n  },\n  leftContent: {\n    flexDirection: \"row\",\n  },\n  userIcon: {\n    width: 50,\n    height: 50,\n    borderRadius: 100,\n    marginRight: 10,\n  },\n  username: {\n    fontWeight: \"bold\",\n  },\n  messageContent: {\n    fontSize: 13,\n    opacity: 0.7,\n    alignItems: \"center\",\n  },\n  rightContent: {\n    alignItems: \"center\",\n  },\n  messageDate: {\n    fontSize: 11,\n    marginBottom: 3,\n  },\n  unread: {\n    backgroundColor: \"#2f95dc\",\n    borderRadius: 100,\n    minWidth: 15,\n    minHeight: 15,\n    textAlign: \"center\",\n    color: \"white\",\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}