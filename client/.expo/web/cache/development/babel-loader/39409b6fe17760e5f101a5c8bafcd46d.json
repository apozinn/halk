{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"rootStyle\", \"textInputStyle\", \"onBlur\", \"onFocus\", \"value\", \"renderCell\", \"cellCount\", \"RootProps\", \"RootComponent\", \"InputComponent\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { forwardRef } from 'react';\nimport { getStyle, getSymbols } from \"./utils\";\nimport { useFocusState } from \"./useFocusState\";\nimport { styles } from \"./CodeField.styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DEFAULT_CELL_COUNT = 4;\nfunction CodeFieldComponent(_ref, ref) {\n  var rootStyle = _ref.rootStyle,\n    textInputStyle = _ref.textInputStyle,\n    onBlur = _ref.onBlur,\n    onFocus = _ref.onFocus,\n    value = _ref.value,\n    renderCell = _ref.renderCell,\n    _ref$cellCount = _ref.cellCount,\n    cellCount = _ref$cellCount === void 0 ? DEFAULT_CELL_COUNT : _ref$cellCount,\n    _ref$RootProps = _ref.RootProps,\n    RootProps = _ref$RootProps === void 0 ? {} : _ref$RootProps,\n    _ref$RootComponent = _ref.RootComponent,\n    RootComponent = _ref$RootComponent === void 0 ? View : _ref$RootComponent,\n    _ref$InputComponent = _ref.InputComponent,\n    InputComponent = _ref$InputComponent === void 0 ? TextInput : _ref$InputComponent,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var focusState = useFocusState(onBlur, onFocus);\n  var cells = getSymbols(value || '', cellCount).map(function (symbol, index, symbols) {\n    var isFirstEmptySymbol = symbols.indexOf('') === index;\n    return renderCell({\n      index: index,\n      symbol: symbol,\n      isFocused: focusState.isFocused && isFirstEmptySymbol\n    });\n  });\n  return _jsxs(RootComponent, _objectSpread(_objectSpread({}, RootProps), {}, {\n    style: getStyle(styles.root, rootStyle),\n    children: [cells, _jsx(InputComponent, _objectSpread(_objectSpread({\n      disableFullscreenUI: true\n      ,\n      caretHidden: true,\n      spellCheck: false,\n      autoCorrect: false,\n      blurOnSubmit: false,\n      clearButtonMode: \"never\",\n      autoCapitalize: \"characters\",\n      underlineColorAndroid: \"transparent\",\n      maxLength: cellCount\n    }, rest), {}, {\n      value: value,\n      onBlur: focusState.onBlur,\n      onFocus: focusState.onFocus,\n      style: getStyle(styles.textInput, textInputStyle),\n      ref: ref\n    }))]\n  }));\n}\nexport var CodeField = forwardRef(CodeFieldComponent);","map":{"version":3,"names":["React","forwardRef","getStyle","getSymbols","useFocusState","styles","DEFAULT_CELL_COUNT","CodeFieldComponent","ref","rootStyle","textInputStyle","onBlur","onFocus","value","renderCell","cellCount","RootProps","RootComponent","View","InputComponent","TextInput","rest","focusState","cells","map","symbol","index","symbols","isFirstEmptySymbol","indexOf","isFocused","root","textInput","CodeField"],"sources":["/home/samuel/Documentos/projetos/mobile/halk/client/node_modules/react-native-confirmation-code-field/esm/CodeField.js"],"sourcesContent":["import {TextInput, View} from 'react-native';\nimport React, {forwardRef} from 'react';\nimport {getStyle, getSymbols} from './utils';\nimport {useFocusState} from './useFocusState';\nimport {styles} from './CodeField.styles';\nconst DEFAULT_CELL_COUNT = 4;\nfunction CodeFieldComponent(\n  {\n    rootStyle,\n    textInputStyle,\n    onBlur,\n    onFocus,\n    value,\n    renderCell,\n    cellCount = DEFAULT_CELL_COUNT,\n    RootProps = {},\n    RootComponent = View,\n    InputComponent = TextInput,\n    ...rest\n  },\n  ref,\n) {\n  const focusState = useFocusState(onBlur, onFocus);\n  const cells = getSymbols(value || '', cellCount).map(\n    (symbol, index, symbols) => {\n      const isFirstEmptySymbol = symbols.indexOf('') === index;\n      return renderCell({\n        index,\n        symbol,\n        isFocused: focusState.isFocused && isFirstEmptySymbol,\n      });\n    },\n  );\n  return (\n    <RootComponent {...RootProps} style={getStyle(styles.root, rootStyle)}>\n      {cells}\n      <InputComponent\n        disableFullscreenUI\n        // Use `caretHidden={false}` when `value={''}` and user can't paste\\copy text because menu doesn't appear\n        // See more: https://github.com/retyui/react-native-confirmation-code-field/issues/140\n        caretHidden={true}\n        spellCheck={false}\n        autoCorrect={false}\n        blurOnSubmit={false}\n        clearButtonMode=\"never\"\n        autoCapitalize=\"characters\"\n        underlineColorAndroid=\"transparent\"\n        maxLength={cellCount}\n        {...rest}\n        value={value}\n        onBlur={focusState.onBlur}\n        onFocus={focusState.onFocus}\n        style={getStyle(styles.textInput, textInputStyle)}\n        ref={ref}\n      />\n    </RootComponent>\n  );\n}\nexport const CodeField = forwardRef(CodeFieldComponent);\n"],"mappings":";;;;;;;AACA,OAAOA,KAAK,IAAGC,UAAU,QAAO,OAAO;AACvC,SAAQC,QAAQ,EAAEC,UAAU;AAC5B,SAAQC,aAAa;AACrB,SAAQC,MAAM;AAA4B;AAAA;AAC1C,IAAMC,kBAAkB,GAAG,CAAC;AAC5B,SAASC,kBAAkB,OAczBC,GAAG,EACH;EAAA,IAbEC,SAAS,QAATA,SAAS;IACTC,cAAc,QAAdA,cAAc;IACdC,MAAM,QAANA,MAAM;IACNC,OAAO,QAAPA,OAAO;IACPC,KAAK,QAALA,KAAK;IACLC,UAAU,QAAVA,UAAU;IAAA,sBACVC,SAAS;IAATA,SAAS,+BAAGT,kBAAkB;IAAA,sBAC9BU,SAAS;IAATA,SAAS,+BAAG,CAAC,CAAC;IAAA,0BACdC,aAAa;IAAbA,aAAa,mCAAGC,IAAI;IAAA,2BACpBC,cAAc;IAAdA,cAAc,oCAAGC,SAAS;IACvBC,IAAI;EAIT,IAAMC,UAAU,GAAGlB,aAAa,CAACO,MAAM,EAAEC,OAAO,CAAC;EACjD,IAAMW,KAAK,GAAGpB,UAAU,CAACU,KAAK,IAAI,EAAE,EAAEE,SAAS,CAAC,CAACS,GAAG,CAClD,UAACC,MAAM,EAAEC,KAAK,EAAEC,OAAO,EAAK;IAC1B,IAAMC,kBAAkB,GAAGD,OAAO,CAACE,OAAO,CAAC,EAAE,CAAC,KAAKH,KAAK;IACxD,OAAOZ,UAAU,CAAC;MAChBY,KAAK,EAALA,KAAK;MACLD,MAAM,EAANA,MAAM;MACNK,SAAS,EAAER,UAAU,CAACQ,SAAS,IAAIF;IACrC,CAAC,CAAC;EACJ,CAAC,CACF;EACD,OACE,MAAC,aAAa,kCAAKZ,SAAS;IAAE,KAAK,EAAEd,QAAQ,CAACG,MAAM,CAAC0B,IAAI,EAAEtB,SAAS,CAAE;IAAA,WACnEc,KAAK,EACN,KAAC,cAAc;MACb,mBAAmB;MAAA;MAGnB,WAAW,EAAE,IAAK;MAClB,UAAU,EAAE,KAAM;MAClB,WAAW,EAAE,KAAM;MACnB,YAAY,EAAE,KAAM;MACpB,eAAe,EAAC,OAAO;MACvB,cAAc,EAAC,YAAY;MAC3B,qBAAqB,EAAC,aAAa;MACnC,SAAS,EAAER;IAAU,GACjBM,IAAI;MACR,KAAK,EAAER,KAAM;MACb,MAAM,EAAES,UAAU,CAACX,MAAO;MAC1B,OAAO,EAAEW,UAAU,CAACV,OAAQ;MAC5B,KAAK,EAAEV,QAAQ,CAACG,MAAM,CAAC2B,SAAS,EAAEtB,cAAc,CAAE;MAClD,GAAG,EAAEF;IAAI,GACT;EAAA,GACY;AAEpB;AACA,OAAO,IAAMyB,SAAS,GAAGhC,UAAU,CAACM,kBAAkB,CAAC"},"metadata":{},"sourceType":"module"}