{"ast":null,"code":"import React, { useContext, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { UserContext } from \"../../src/contexts/user\";\nimport { ChatsContext } from \"../../src/contexts/chats\";\nimport NewChatButton from \"../../src/components/newChat\";\nimport Socket, { CreateSocketConnection } from \"../../src/utils/socket\";\nimport ChatContainer from \"../../src/components/chatContainer\";\nimport { getColors } from \"../../constants/Colors\";\nimport { Cipher, Decipher } from \"../../middleware/crypto\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createElement as _createElement } from \"react\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Chats(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(UserContext),\n      user = _useContext.user,\n      logged = _useContext.logged;\n\n  var _useContext2 = useContext(ChatsContext),\n      chats = _useContext2.chats,\n      updateChats = _useContext2.updateChats;\n\n  var socket = CreateSocketConnection({\n    userId: user.id\n  });\n  var colors = getColors();\n  useEffect(function () {\n    socket.on(\"newChat\", function (_ref2) {\n      var newChat = _ref2.newChat;\n\n      if (newChat) {\n        var existsChat = chats.filter(function (c) {\n          return c.user.id === newChat.user.id;\n        })[0];\n\n        if (existsChat) {\n          var messagesReplace = [];\n          existsChat.messages.map(function (m) {\n            var contentDecipher = m.content = Decipher(m.content, existsChat.key);\n            var newContentCipher = Cipher(contentDecipher, newChat.key);\n            m.content = newContentCipher;\n            messagesReplace.push(m);\n          });\n          existsChat.id = newChat.id;\n          existsChat.key = newChat.key;\n          existsChat.user = newChat.user;\n          updateChats({\n            chats: chats\n          });\n        } else {\n          chats.push(newChat);\n          updateChats({\n            chats: chats\n          });\n        }\n      }\n    });\n    socket.on(\"receiveMessage\", function (msg) {\n      if (msg) {\n        var thisChat = chats.filter(function (c) {\n          return c.user.id === msg.author.id;\n        })[0];\n\n        if (thisChat) {\n          if (thisChat.messages.some(function (m) {\n            return m.id === msg.id;\n          })) return;\n          thisChat.messages.push(msg);\n          updateChats({\n            chats: chats\n          });\n        } else {\n          var newChat = {\n            id: msg.chat.id,\n            key: msg.chat.key,\n            user: msg.author,\n            messages: [msg]\n          };\n          chats.push(newChat);\n          updateChats({\n            chats: chats\n          });\n        }\n      }\n    });\n    socket.on(\"readMessage\", function (p) {\n      var thisChat = chats.filter(function (c) {\n        return c.id === p.chat;\n      })[0];\n\n      if (thisChat) {\n        thisChat.messages.filter(function (m) {\n          return !m.read;\n        }).map(function (m) {\n          return m.read = true;\n        });\n        updateChats({\n          chats: chats\n        });\n      }\n    });\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [!logged ? _jsx(_Fragment, {\n      children: navigation.navigate(\"Welcome\")\n    }) : _jsx(ScrollView, {\n      style: {\n        padding: 5\n      },\n      showsVerticalScrollIndicator: false,\n      showsHorizontalScrollIndicator: false,\n      children: !chats.length ? _jsx(ChatContainer, {\n        chat: new Socket.sendHalkMessage(),\n        user: user,\n        chats: chats,\n        navigation: navigation,\n        socket: socket,\n        colors: colors\n      }) : _jsx(_Fragment, {\n        children: chats.map(function (chat, index) {\n          return _createElement(ChatContainer, {\n            user: user,\n            chats: chats,\n            updateChats: updateChats,\n            chat: chat,\n            navigation: navigation,\n            socket: socket,\n            colors: colors,\n            key: index\n          });\n        })\n      })\n    }), _jsx(NewChatButton, {\n      navigation: navigation\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","useContext","useEffect","UserContext","ChatsContext","NewChatButton","Socket","CreateSocketConnection","ChatContainer","getColors","Cipher","Decipher","Chats","navigation","user","logged","chats","updateChats","socket","userId","id","colors","on","newChat","existsChat","filter","c","messagesReplace","messages","map","m","contentDecipher","content","key","newContentCipher","push","msg","thisChat","author","some","chat","p","read","styles","container","navigate","padding","length","sendHalkMessage","index","StyleSheet","create","flex"],"sources":["/home/samuel/Documentos/projetos/mobile/halk/client/screens/app/chats.tsx"],"sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport { View, StyleSheet, ScrollView } from \"react-native\";\nimport { RootTabScreenProps } from \"../../types\";\nimport { UserContext } from \"../../src/contexts/user\";\nimport { ChatsContext } from \"../../src/contexts/chats\";\nimport NewChatButton from \"../../src/components/newChat\";\nimport Socket, { CreateSocketConnection } from \"../../src/utils/socket\";\nimport ChatContainer from \"../../src/components/chatContainer\";\nimport { getColors } from \"../../constants/Colors\";\nimport { Cipher, Decipher } from '../../middleware/crypto';\n\nexport default function Chats({ navigation }: RootTabScreenProps<\"Chats\">) {\n  const { user, logged } = useContext(UserContext);\n  const { chats, updateChats } = useContext(ChatsContext);\n  const socket = CreateSocketConnection({ userId: user.id });\n  const colors = getColors();\n\n  useEffect(() => {\n    socket.on(\"newChat\", ({ newChat }) => {\n      if (newChat) {\n        const existsChat = chats.filter((c) => c.user.id === newChat.user.id)[0];\n\n        if(existsChat) {\n          let messagesReplace = [];\n          existsChat.messages.map((m) => {\n            const contentDecipher = m.content = Decipher(m.content, existsChat.key);\n            const newContentCipher = Cipher(contentDecipher, newChat.key);\n            m.content = newContentCipher;\n            messagesReplace.push(m);\n          });\n\n          existsChat.id = newChat.id;\n          existsChat.key = newChat.key;\n          existsChat.user = newChat.user;\n\n          updateChats({ chats });\n        } else {\n          chats.push(newChat);\n          updateChats({ chats });\n        }\n      }\n    });\n\n    socket.on(\"receiveMessage\", (msg) => {\n      if (msg) {\n        const thisChat = chats.filter((c) => c.user.id === msg.author.id)[0];\n        if (thisChat) {\n          if (thisChat.messages.some((m) => m.id === msg.id)) return;\n          thisChat.messages.push(msg);\n          updateChats({ chats });\n        } else {\n          const newChat = {\n            id: msg.chat.id,\n            key: msg.chat.key,\n            user: msg.author,\n            messages: [msg],\n          };\n\n          chats.push(newChat);\n          updateChats({ chats });\n        }\n      }\n    });\n\n    socket.on(\"readMessage\", (p) => {\n      const thisChat = chats.filter((c) => c.id === p.chat)[0];\n      if (thisChat) {\n        thisChat.messages.filter((m) => !m.read).map((m) => (m.read = true));\n        updateChats({ chats });\n      }\n    });\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      {!logged ? (\n        <>{navigation.navigate(\"Welcome\")}</>\n      ) : (\n        <ScrollView\n          style={{ padding: 5 }}\n          showsVerticalScrollIndicator={false}\n          showsHorizontalScrollIndicator={false}\n        >\n          {!chats.length ? (\n            <ChatContainer\n              chat={new Socket.sendHalkMessage()}\n              {...{ user, chats, navigation, socket, colors }}\n            />\n          ) : (\n            <>\n              {chats.map((chat, index) => (\n                <ChatContainer\n                  {...{ user, chats, updateChats, chat, navigation, socket, colors }}\n                  key={index}\n                />\n              ))}\n            </>\n          )}\n        </ScrollView>\n      )}\n      <NewChatButton navigation={navigation} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;;;;AAGA,SAASC,WAAT;AACA,SAASC,YAAT;AACA,OAAOC,aAAP;AACA,OAAOC,MAAP,IAAiBC,sBAAjB;AACA,OAAOC,aAAP;AACA,SAASC,SAAT;AACA,SAASC,MAAT,EAAiBC,QAAjB;;;;;AAEA,eAAe,SAASC,KAAT,OAA4D;EAAA,IAA3CC,UAA2C,QAA3CA,UAA2C;;EACzE,kBAAyBZ,UAAU,CAACE,WAAD,CAAnC;EAAA,IAAQW,IAAR,eAAQA,IAAR;EAAA,IAAcC,MAAd,eAAcA,MAAd;;EACA,mBAA+Bd,UAAU,CAACG,YAAD,CAAzC;EAAA,IAAQY,KAAR,gBAAQA,KAAR;EAAA,IAAeC,WAAf,gBAAeA,WAAf;;EACA,IAAMC,MAAM,GAAGX,sBAAsB,CAAC;IAAEY,MAAM,EAAEL,IAAI,CAACM;EAAf,CAAD,CAArC;EACA,IAAMC,MAAM,GAAGZ,SAAS,EAAxB;EAEAP,SAAS,CAAC,YAAM;IACdgB,MAAM,CAACI,EAAP,CAAU,SAAV,EAAqB,iBAAiB;MAAA,IAAdC,OAAc,SAAdA,OAAc;;MACpC,IAAIA,OAAJ,EAAa;QACX,IAAMC,UAAU,GAAGR,KAAK,CAACS,MAAN,CAAa,UAACC,CAAD;UAAA,OAAOA,CAAC,CAACZ,IAAF,CAAOM,EAAP,KAAcG,OAAO,CAACT,IAAR,CAAaM,EAAlC;QAAA,CAAb,EAAmD,CAAnD,CAAnB;;QAEA,IAAGI,UAAH,EAAe;UACb,IAAIG,eAAe,GAAG,EAAtB;UACAH,UAAU,CAACI,QAAX,CAAoBC,GAApB,CAAwB,UAACC,CAAD,EAAO;YAC7B,IAAMC,eAAe,GAAGD,CAAC,CAACE,OAAF,GAAYrB,QAAQ,CAACmB,CAAC,CAACE,OAAH,EAAYR,UAAU,CAACS,GAAvB,CAA5C;YACA,IAAMC,gBAAgB,GAAGxB,MAAM,CAACqB,eAAD,EAAkBR,OAAO,CAACU,GAA1B,CAA/B;YACAH,CAAC,CAACE,OAAF,GAAYE,gBAAZ;YACAP,eAAe,CAACQ,IAAhB,CAAqBL,CAArB;UACD,CALD;UAOAN,UAAU,CAACJ,EAAX,GAAgBG,OAAO,CAACH,EAAxB;UACAI,UAAU,CAACS,GAAX,GAAiBV,OAAO,CAACU,GAAzB;UACAT,UAAU,CAACV,IAAX,GAAkBS,OAAO,CAACT,IAA1B;UAEAG,WAAW,CAAC;YAAED,KAAK,EAALA;UAAF,CAAD,CAAX;QACD,CAdD,MAcO;UACLA,KAAK,CAACmB,IAAN,CAAWZ,OAAX;UACAN,WAAW,CAAC;YAAED,KAAK,EAALA;UAAF,CAAD,CAAX;QACD;MACF;IACF,CAvBD;IAyBAE,MAAM,CAACI,EAAP,CAAU,gBAAV,EAA4B,UAACc,GAAD,EAAS;MACnC,IAAIA,GAAJ,EAAS;QACP,IAAMC,QAAQ,GAAGrB,KAAK,CAACS,MAAN,CAAa,UAACC,CAAD;UAAA,OAAOA,CAAC,CAACZ,IAAF,CAAOM,EAAP,KAAcgB,GAAG,CAACE,MAAJ,CAAWlB,EAAhC;QAAA,CAAb,EAAiD,CAAjD,CAAjB;;QACA,IAAIiB,QAAJ,EAAc;UACZ,IAAIA,QAAQ,CAACT,QAAT,CAAkBW,IAAlB,CAAuB,UAACT,CAAD;YAAA,OAAOA,CAAC,CAACV,EAAF,KAASgB,GAAG,CAAChB,EAApB;UAAA,CAAvB,CAAJ,EAAoD;UACpDiB,QAAQ,CAACT,QAAT,CAAkBO,IAAlB,CAAuBC,GAAvB;UACAnB,WAAW,CAAC;YAAED,KAAK,EAALA;UAAF,CAAD,CAAX;QACD,CAJD,MAIO;UACL,IAAMO,OAAO,GAAG;YACdH,EAAE,EAAEgB,GAAG,CAACI,IAAJ,CAASpB,EADC;YAEda,GAAG,EAAEG,GAAG,CAACI,IAAJ,CAASP,GAFA;YAGdnB,IAAI,EAAEsB,GAAG,CAACE,MAHI;YAIdV,QAAQ,EAAE,CAACQ,GAAD;UAJI,CAAhB;UAOApB,KAAK,CAACmB,IAAN,CAAWZ,OAAX;UACAN,WAAW,CAAC;YAAED,KAAK,EAALA;UAAF,CAAD,CAAX;QACD;MACF;IACF,CAnBD;IAqBAE,MAAM,CAACI,EAAP,CAAU,aAAV,EAAyB,UAACmB,CAAD,EAAO;MAC9B,IAAMJ,QAAQ,GAAGrB,KAAK,CAACS,MAAN,CAAa,UAACC,CAAD;QAAA,OAAOA,CAAC,CAACN,EAAF,KAASqB,CAAC,CAACD,IAAlB;MAAA,CAAb,EAAqC,CAArC,CAAjB;;MACA,IAAIH,QAAJ,EAAc;QACZA,QAAQ,CAACT,QAAT,CAAkBH,MAAlB,CAAyB,UAACK,CAAD;UAAA,OAAO,CAACA,CAAC,CAACY,IAAV;QAAA,CAAzB,EAAyCb,GAAzC,CAA6C,UAACC,CAAD;UAAA,OAAQA,CAAC,CAACY,IAAF,GAAS,IAAjB;QAAA,CAA7C;QACAzB,WAAW,CAAC;UAAED,KAAK,EAALA;QAAF,CAAD,CAAX;MACD;IACF,CAND;EAOD,CAtDQ,EAsDN,EAtDM,CAAT;EAwDA,OACE,MAAC,IAAD;IAAM,KAAK,EAAE2B,MAAM,CAACC,SAApB;IAAA,WACG,CAAC7B,MAAD,GACC;MAAA,UAAGF,UAAU,CAACgC,QAAX,CAAoB,SAApB;IAAH,EADD,GAGC,KAAC,UAAD;MACE,KAAK,EAAE;QAAEC,OAAO,EAAE;MAAX,CADT;MAEE,4BAA4B,EAAE,KAFhC;MAGE,8BAA8B,EAAE,KAHlC;MAAA,UAKG,CAAC9B,KAAK,CAAC+B,MAAP,GACC,KAAC,aAAD;QACE,IAAI,EAAE,IAAIzC,MAAM,CAAC0C,eAAX,EADR;QAEQlC,IAAI,EAAJA,IAFR;QAEcE,KAAK,EAALA,KAFd;QAEqBH,UAAU,EAAVA,UAFrB;QAEiCK,MAAM,EAANA,MAFjC;QAEyCG,MAAM,EAANA;MAFzC,EADD,GAMC;QAAA,UACGL,KAAK,CAACa,GAAN,CAAU,UAACW,IAAD,EAAOS,KAAP;UAAA,OACT,eAAC,aAAD;YACQnC,IAAI,EAAJA,IADR;YACcE,KAAK,EAALA,KADd;YACqBC,WAAW,EAAXA,WADrB;YACkCuB,IAAI,EAAJA,IADlC;YACwC3B,UAAU,EAAVA,UADxC;YACoDK,MAAM,EAANA,MADpD;YAC4DG,MAAM,EAANA,MAD5D;YAEE,GAAG,EAAE4B;UAFP,EADS;QAAA,CAAV;MADH;IAXJ,EAJJ,EA0BE,KAAC,aAAD;MAAe,UAAU,EAAEpC;IAA3B,EA1BF;EAAA,EADF;AA8BD;AAED,IAAM8B,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;EAC/BP,SAAS,EAAE;IACTQ,IAAI,EAAE;EADG;AADoB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}