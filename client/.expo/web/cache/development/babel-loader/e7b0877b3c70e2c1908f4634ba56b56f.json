{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport io from \"socket.io-client\";\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nvar SocketController = function () {\n  function SocketController(socket) {\n    _classCallCheck(this, SocketController);\n\n    this.socket = socket;\n  }\n\n  _createClass(SocketController, [{\n    key: \"getSocket\",\n    value: function getSocket() {}\n  }, {\n    key: \"joinRoom\",\n    value: function joinRoom(room) {}\n  }, {\n    key: \"getMessages\",\n    value: function () {\n      var _getMessages = _asyncToGenerator(function* (room) {});\n\n      function getMessages(_x) {\n        return _getMessages.apply(this, arguments);\n      }\n\n      return getMessages;\n    }()\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(text) {}\n  }], [{\n    key: \"sendHalkMessage\",\n    value: function sendHalkMessage() {\n      function generateKey() {\n        var parts = [];\n\n        for (var i = 0; i < 5; i++) {\n          var numberSequence = Math.floor(Math.random() * (999999 - 100000 + 1) + 100000);\n          parts.push(numberSequence);\n        }\n\n        return parts.join(\" \");\n      }\n\n      var timeNow = new Date().getTime();\n      var halkUser = {\n        id: \"0\",\n        phone: \"\",\n        profile: {\n          name: \"Halk\",\n          username: \"Halk\",\n          avatar: require(\"../../assets/images/icon.png\"),\n          bio: \"Official account of the team Halk\"\n        }\n      };\n      var halkChat = {\n        id: \"a384b2bc-1a3b-49d3-bdf5-1be72350c494\",\n        user: halkUser,\n        key: generateKey(),\n        messages: [{\n          author: halkUser,\n          content: \"Welcome to halk!\",\n          createdAt: timeNow,\n          id: \"\" + timeNow + Math.floor(Math.random() * (100000000 - 1000000 + 1) + 1000000),\n          read: false\n        }]\n      };\n      return halkChat;\n    }\n  }]);\n\n  return SocketController;\n}();\n\nexport { SocketController as default };\nexport function CreateSocketConnection() {\n  var socket = io(\"http://localhost:3000\", {\n    transports: [\"websocket\"],\n    auth: {\n      token: \"123\"\n    }\n  });\n  return socket;\n}","map":{"version":3,"names":["io","dotenv","config","SocketController","socket","room","text","generateKey","parts","i","numberSequence","Math","floor","random","push","join","timeNow","Date","getTime","halkUser","id","phone","profile","name","username","avatar","require","bio","halkChat","user","key","messages","author","content","createdAt","read","CreateSocketConnection","transports","auth","token"],"sources":["/home/samuel/Documentos/projetos/mobile/halk/client/src/utils/socket.ts"],"sourcesContent":["import io from \"socket.io-client\";\nimport * as dotenv from \"dotenv\";\nimport * as uuid from \"uuid\";\ndotenv.config();\n\nexport default class SocketController {\n  constructor(socket) {\n    this.socket = socket;\n  }\n\n  public getSocket() {}\n\n  public joinRoom(room: string) {}\n\n  public async getMessages(room) {}\n\n  public sendMessage(text: string) {}\n\n  public async getMessages(room: string) {}\n\n  static sendHalkMessage() {\n    function generateKey() {\n      const parts = [];\n      for (let i = 0; i < 5; i++) {\n        const numberSequence = Math.floor(\n          Math.random() * (999999 - 100000 + 1) + 100000\n        );\n        parts.push(numberSequence);\n      }\n\n      return parts.join(\" \");\n    }\n\n    const timeNow = new Date().getTime();\n    const halkUser = {\n      id: \"0\",\n      phone: \"\",\n      profile: {\n        name: \"Halk\",\n        username: \"Halk\",\n        avatar: require(\"../../assets/images/icon.png\"),\n        bio: \"Official account of the team Halk\",\n      },\n    };\n\n    const halkChat = {\n      id: \"a384b2bc-1a3b-49d3-bdf5-1be72350c494\",\n      user: halkUser,\n      key: generateKey(),\n      messages: [\n        {\n          author: halkUser,\n          content: \"Welcome to halk!\",\n          createdAt: timeNow,\n          id: `${timeNow}${Math.floor(\n            Math.random() * (100000000 - 1000000 + 1) + 1000000\n          )}`,\n          read: false,\n        },\n      ],\n    };\n\n    return halkChat;\n  }\n}\n\nexport function CreateSocketConnection() {\n  const socket = io(\"http://localhost:3000\", {\n    transports: [\"websocket\"],\n    auth: {\n      token: \"123\",\n    },\n  });\n\n  return socket;\n}\n"],"mappings":";;;AAAA,OAAOA,EAAP,MAAe,kBAAf;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;AAEAA,MAAM,CAACC,MAAP;;IAEqBC,gB;EACnB,0BAAYC,MAAZ,EAAoB;IAAA;;IAClB,KAAKA,MAAL,GAAcA,MAAd;EACD;;;;WAED,qBAAmB,CAAE;;;WAErB,kBAAgBC,IAAhB,EAA8B,CAAE;;;;2CAMhC,WAAyBA,IAAzB,EAAuC,CAAE,C;;;;;;;;;;WAFzC,qBAAmBC,IAAnB,EAAiC,CAAE;;;WAInC,2BAAyB;MACvB,SAASC,WAAT,GAAuB;QACrB,IAAMC,KAAK,GAAG,EAAd;;QACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;UAC1B,IAAMC,cAAc,GAAGC,IAAI,CAACC,KAAL,CACrBD,IAAI,CAACE,MAAL,MAAiB,SAAS,MAAT,GAAkB,CAAnC,IAAwC,MADnB,CAAvB;UAGAL,KAAK,CAACM,IAAN,CAAWJ,cAAX;QACD;;QAED,OAAOF,KAAK,CAACO,IAAN,CAAW,GAAX,CAAP;MACD;;MAED,IAAMC,OAAO,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAhB;MACA,IAAMC,QAAQ,GAAG;QACfC,EAAE,EAAE,GADW;QAEfC,KAAK,EAAE,EAFQ;QAGfC,OAAO,EAAE;UACPC,IAAI,EAAE,MADC;UAEPC,QAAQ,EAAE,MAFH;UAGPC,MAAM,EAAEC,OAAO,gCAHR;UAIPC,GAAG,EAAE;QAJE;MAHM,CAAjB;MAWA,IAAMC,QAAQ,GAAG;QACfR,EAAE,EAAE,sCADW;QAEfS,IAAI,EAAEV,QAFS;QAGfW,GAAG,EAAEvB,WAAW,EAHD;QAIfwB,QAAQ,EAAE,CACR;UACEC,MAAM,EAAEb,QADV;UAEEc,OAAO,EAAE,kBAFX;UAGEC,SAAS,EAAElB,OAHb;UAIEI,EAAE,OAAKJ,OAAL,GAAeL,IAAI,CAACC,KAAL,CACfD,IAAI,CAACE,MAAL,MAAiB,YAAY,OAAZ,GAAsB,CAAvC,IAA4C,OAD7B,CAJnB;UAOEsB,IAAI,EAAE;QAPR,CADQ;MAJK,CAAjB;MAiBA,OAAOP,QAAP;IACD;;;;;;SA1DkBzB,gB;AA6DrB,OAAO,SAASiC,sBAAT,GAAkC;EACvC,IAAMhC,MAAM,GAAGJ,EAAE,CAAC,uBAAD,EAA0B;IACzCqC,UAAU,EAAE,CAAC,WAAD,CAD6B;IAEzCC,IAAI,EAAE;MACJC,KAAK,EAAE;IADH;EAFmC,CAA1B,CAAjB;EAOA,OAAOnC,MAAP;AACD"},"metadata":{},"sourceType":"module"}