{"ast":null,"code":"import React, { useContext, useEffect } from \"react\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { UserContext } from \"../../src/contexts/user\";\nimport { ChatsContext } from \"../../src/contexts/chats\";\nimport { Text } from \"../../src/components/Themed\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport NewChatButton from \"../../src/components/newChat\";\nimport { getColors } from \"../../constants/Colors\";\nimport Socket, { CreateSocketConnection } from \"../../src/utils/socket\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function Chats(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(UserContext),\n      user = _useContext.user,\n      logged = _useContext.logged,\n      updateUser = _useContext.updateUser;\n\n  var _useContext2 = useContext(ChatsContext),\n      chats = _useContext2.chats;\n\n  var colors = getColors();\n  useEffect(function () {\n    var socketConnection = CreateSocketConnection();\n    socketConnection.on(\"receiveMessage\", function (msg, client) {\n      var newChat = chats.filter(function (c) {\n        return c.user.id === msg.author.id;\n      })[0];\n\n      if (!newChat) {\n        var _newChat = {\n          id: uuid.v4(),\n          user: user,\n          key: msg.key,\n          messages: []\n        };\n        chats.push(_newChat);\n        updateChats({\n          chats: chats\n        });\n      }\n    });\n  }, [chats]);\n\n  function ChatContainer(_ref2) {\n    var chat = _ref2.chat,\n        _ref2$index = _ref2.index,\n        index = _ref2$index === void 0 ? 1 : _ref2$index;\n    if (!chat.id) return;\n    var lastMessage = chat.messages[chat.messages.length - 1];\n    var unredMessages = chat.messages.filter(function (m) {\n      return !m.read;\n    });\n    var messageTime = new Date(lastMessage.createdAt).toLocaleTimeString();\n    return _jsxs(Pressable, {\n      style: function style(_ref3) {\n        var pressed = _ref3.pressed;\n        return [styles.chat, {\n          backgroundColor: pressed ? colors.defaultColors.card : \"transparent\"\n        }];\n      },\n      onPress: function onPress() {\n        return navigation.navigate(\"Chat\", {\n          id: chat.id\n        });\n      },\n      children: [_jsxs(View, {\n        style: styles.leftContent,\n        children: [_jsx(Image, {\n          source: {\n            uri: chat.user.profile.avatar\n          },\n          style: styles.userIcon\n        }), _jsxs(View, {\n          style: {\n            justifyContent: \"center\"\n          },\n          children: [_jsx(Text, {\n            style: styles.username,\n            children: chat.user.profile.name\n          }), lastMessage.author.id === user.id ? _jsxs(View, {\n            style: {\n              flexDirection: 'row',\n              alignItems: 'center'\n            },\n            children: [_jsx(Ionicons, {\n              name: \"checkmark-done\",\n              size: 20,\n              color: \"gray\"\n            }), _jsx(Text, {\n              style: styles.messageContent,\n              children: lastMessage.content.length > 28 ? lastMessage.content.slice(0, 28) + \"...\" : lastMessage.content\n            })]\n          }) : _jsx(Text, {\n            children: lastMessage.content.length > 30 ? lastMessage.content.slice(0, 30) + \"...\" : lastMessage.content\n          })]\n        })]\n      }), _jsxs(View, {\n        style: styles.rightContent,\n        children: [_jsx(Text, {\n          style: styles.messageDate,\n          children: messageTime.slice(0, 5)\n        }), !unredMessages.length ? _jsx(_Fragment, {}) : _jsx(Text, {\n          style: styles.unread,\n          children: unredMessages.length\n        })]\n      })]\n    }, index);\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [!logged ? _jsx(_Fragment, {\n      children: navigation.navigate(\"Welcome\")\n    }) : _jsx(ScrollView, {\n      style: {\n        padding: 5\n      },\n      children: !chats.length ? _jsx(ChatContainer, {\n        chat: new Socket.sendHalkMessage()\n      }) : _jsx(_Fragment, {\n        children: chats.map(function (chat, index) {\n          return _jsx(ChatContainer, {\n            chat: chat,\n            index: index\n          });\n        })\n      })\n    }), _jsx(NewChatButton, {\n      navigation: navigation\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  chat: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    borderRadius: 10,\n    padding: 5\n  },\n  leftContent: {\n    flexDirection: \"row\"\n  },\n  userIcon: {\n    width: 50,\n    height: 50,\n    borderRadius: 100,\n    marginRight: 10\n  },\n  username: {},\n  messageContent: {\n    fontSize: 13,\n    opacity: 0.7,\n    alignItems: \"center\"\n  },\n  rightContent: {\n    alignItems: \"center\"\n  },\n  messageDate: {\n    fontSize: 11,\n    marginBottom: 3\n  },\n  unread: {\n    backgroundColor: \"#2f95dc\",\n    borderRadius: 100,\n    minWidth: 15,\n    minHeight: 15,\n    textAlign: \"center\",\n    color: \"white\"\n  }\n});","map":{"version":3,"names":["React","useContext","useEffect","UserContext","ChatsContext","Text","Ionicons","NewChatButton","getColors","Socket","CreateSocketConnection","Chats","navigation","user","logged","updateUser","chats","colors","socketConnection","on","msg","client","newChat","filter","c","id","author","uuid","v4","key","messages","push","updateChats","ChatContainer","chat","index","lastMessage","length","unredMessages","m","read","messageTime","Date","createdAt","toLocaleTimeString","pressed","styles","backgroundColor","defaultColors","card","navigate","leftContent","uri","profile","avatar","userIcon","justifyContent","username","name","flexDirection","alignItems","messageContent","content","slice","rightContent","messageDate","unread","container","padding","sendHalkMessage","map","StyleSheet","create","flex","borderRadius","width","height","marginRight","fontSize","opacity","marginBottom","minWidth","minHeight","textAlign","color"],"sources":["/home/samuel/Documentos/projetos/mobile/halk/client/screens/app/chats.tsx"],"sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport { Pressable, View, StyleSheet, ScrollView, Image } from \"react-native\";\nimport { RootTabScreenProps } from \"../../types\";\nimport { UserContext } from \"../../src/contexts/user\";\nimport { ChatsContext } from \"../../src/contexts/chats\";\nimport { Text } from \"../../src/components/Themed\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport NewChatButton from \"../../src/components/newChat\";\nimport { getColors } from \"../../constants/Colors\";\nimport Socket, { CreateSocketConnection } from \"../../src/utils/socket\";\n\nexport default function Chats({ navigation }: RootTabScreenProps<\"Chats\">) {\n  const { user, logged, updateUser } = useContext(UserContext);\n  const { chats } = useContext(ChatsContext);\n  const colors = getColors();\n\n  useEffect(() => {\n    const socketConnection = CreateSocketConnection();\n    socketConnection.on(\"receiveMessage\", (msg, client) => {\n      const newChat = chats.filter((c) => c.user.id === msg.author.id)[0];\n      if (!newChat) {\n        const newChat = {\n          id: uuid.v4(),\n          user,\n          key: msg.key,\n          messages: [],\n        };\n\n        chats.push(newChat);\n        updateChats({ chats });\n      }\n    });\n  }, [chats]);\n\n  function ChatContainer({ chat, index = 1 }) {\n    if (!chat.id) return;\n    const lastMessage = chat.messages[chat.messages.length - 1];\n    const unredMessages = chat.messages.filter((m) => !m.read);\n    const messageTime = new Date(lastMessage.createdAt).toLocaleTimeString();\n\n    return (\n      <Pressable\n        style={({ pressed }) => [\n          styles.chat,\n          {\n            backgroundColor: pressed\n              ? colors.defaultColors.card\n              : \"transparent\",\n          },\n        ]}\n        key={index}\n        onPress={() =>\n          navigation.navigate(\"Chat\", {\n            id: chat.id,\n          })\n        }\n      >\n        <View style={styles.leftContent}>\n          <Image\n            source={{ uri: chat.user.profile.avatar }}\n            style={styles.userIcon}\n          />\n          <View style={{ justifyContent: \"center\" }}>\n            <Text style={styles.username}>{chat.user.profile.name}</Text>\n\n            {lastMessage.author.id === user.id ? (\n              <View style={{flexDirection: 'row', alignItems: 'center'}}>\n                <Ionicons name=\"checkmark-done\" size={20} color=\"gray\" />\n                <Text style={styles.messageContent}>\n                  {lastMessage.content.length > 28\n                    ? lastMessage.content.slice(0, 28) + \"...\"\n                    : lastMessage.content}\n                </Text>\n              </View>\n            ) : (\n              <Text>\n                {lastMessage.content.length > 30\n                  ? lastMessage.content.slice(0, 30) + \"...\"\n                  : lastMessage.content}\n              </Text>\n            )}\n          </View>\n        </View>\n        <View style={styles.rightContent}>\n          <Text style={styles.messageDate}>{messageTime.slice(0, 5)}</Text>\n          {!unredMessages.length ? (\n            <></>\n          ) : (\n            <Text style={styles.unread}>{unredMessages.length}</Text>\n          )}\n        </View>\n      </Pressable>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {!logged ? (\n        <>{navigation.navigate(\"Welcome\")}</>\n      ) : (\n        <ScrollView style={{ padding: 5 }}>\n          {!chats.length ? (\n            <ChatContainer chat={new Socket.sendHalkMessage()} />\n          ) : (\n            <>\n              {chats.map((chat, index) => (\n                <ChatContainer chat={chat} index={index} />\n              ))}\n            </>\n          )}\n        </ScrollView>\n      )}\n      <NewChatButton navigation={navigation} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  chat: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    borderRadius: 10,\n    padding: 5,\n  },\n  leftContent: {\n    flexDirection: \"row\",\n  },\n  userIcon: {\n    width: 50,\n    height: 50,\n    borderRadius: 100,\n    marginRight: 10,\n  },\n  username: {},\n  messageContent: {\n    fontSize: 13,\n    opacity: 0.7,\n    alignItems: \"center\",\n  },\n  rightContent: {\n    alignItems: \"center\",\n  },\n  messageDate: {\n    fontSize: 11,\n    marginBottom: 3,\n  },\n  unread: {\n    backgroundColor: \"#2f95dc\",\n    borderRadius: 100,\n    minWidth: 15,\n    minHeight: 15,\n    textAlign: \"center\",\n    color: \"white\",\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}