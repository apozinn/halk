{"ast":null,"code":"import { getCalendar, getCountry, getCurrencies, getLocales, getNumberFormatSettings, getTemperatureUnit, getTimeZone, handlers, uses24HourClock, usesAutoDateAndTime, usesAutoTimeZone, usesMetricSystem } from \"./module\";\n\nfunction logUnknownEvent(type) {\n  console.error(\"`\" + type + \"` is not a valid react-native-localize event\");\n}\n\nexport function addEventListener(type, handler) {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (!handlers.has(handler)) {\n    handlers.add(handler);\n  }\n}\nexport function removeEventListener(type, handler) {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (handlers.has(handler)) {\n    handlers.delete(handler);\n  }\n}\nexport function findBestAvailableLanguage(languageTags) {\n  var locales = getLocales();\n  var loweredLanguageTags = languageTags.map(function (tag) {\n    return tag.toLowerCase();\n  });\n\n  for (var i = 0; i < locales.length; i++) {\n    var currentLocale = locales[i];\n    var languageTag = currentLocale.languageTag,\n        languageCode = currentLocale.languageCode,\n        scriptCode = currentLocale.scriptCode,\n        countryCode = currentLocale.countryCode,\n        isRTL = currentLocale.isRTL;\n    var combinaisons = [languageTag, !!scriptCode ? languageCode + \"-\" + scriptCode : null, languageCode + \"-\" + countryCode, languageCode].filter(function (value) {\n      return !!value;\n    });\n\n    for (var j = 0; j < combinaisons.length; j++) {\n      var combinaison = combinaisons[j].toLowerCase();\n      var tagIndex = loweredLanguageTags.indexOf(combinaison);\n\n      if (tagIndex !== -1) {\n        return {\n          languageTag: languageTags[tagIndex],\n          isRTL: isRTL\n        };\n      }\n    }\n  }\n}\nexport { getCalendar, getCountry, getCurrencies, getLocales, getNumberFormatSettings, getTemperatureUnit, getTimeZone, uses24HourClock, usesAutoDateAndTime, usesAutoTimeZone, usesMetricSystem } from \"./module\";\nexport * from \"./types\";\nexport default {\n  getCalendar: getCalendar,\n  getCountry: getCountry,\n  getCurrencies: getCurrencies,\n  getLocales: getLocales,\n  getNumberFormatSettings: getNumberFormatSettings,\n  getTemperatureUnit: getTemperatureUnit,\n  getTimeZone: getTimeZone,\n  uses24HourClock: uses24HourClock,\n  usesAutoDateAndTime: usesAutoDateAndTime,\n  usesAutoTimeZone: usesAutoTimeZone,\n  usesMetricSystem: usesMetricSystem,\n  findBestAvailableLanguage: findBestAvailableLanguage,\n  addEventListener: addEventListener,\n  removeEventListener: removeEventListener\n};","map":{"version":3,"mappings":"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","names":["getCalendar","getCountry","getCurrencies","getLocales","getNumberFormatSettings","getTemperatureUnit","getTimeZone","handlers","uses24HourClock","usesAutoDateAndTime","usesAutoTimeZone","usesMetricSystem","logUnknownEvent","type","console","error","addEventListener","handler","has","add","removeEventListener","delete","findBestAvailableLanguage","languageTags","locales","loweredLanguageTags","map","tag","toLowerCase","i","length","currentLocale","languageTag","languageCode","scriptCode","countryCode","isRTL","combinaisons","filter","value","j","combinaison","tagIndex","indexOf"],"sources":["index.ts"],"sourcesContent":["import {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  handlers,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n} from \"./module\";\nimport { LocalizationEvent } from \"./types\";\n\nfunction logUnknownEvent(type: string) {\n  console.error(`\\`${type}\\` is not a valid react-native-localize event`);\n}\n\nexport function addEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (!handlers.has(handler)) {\n    handlers.add(handler);\n  }\n}\n\nexport function removeEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (handlers.has(handler)) {\n    handlers.delete(handler);\n  }\n}\n\nexport function findBestAvailableLanguage<T extends string>(\n  languageTags: ReadonlyArray<T>,\n): { languageTag: T; isRTL: boolean } | undefined {\n  const locales = getLocales();\n  const loweredLanguageTags = languageTags.map((tag) => tag.toLowerCase());\n\n  for (let i = 0; i < locales.length; i++) {\n    const currentLocale = locales[i];\n\n    const { languageTag, languageCode, scriptCode, countryCode, isRTL } =\n      currentLocale;\n\n    const combinaisons = [\n      languageTag,\n      !!scriptCode ? languageCode + \"-\" + scriptCode : null,\n      languageCode + \"-\" + countryCode,\n      languageCode,\n    ].filter((value): value is string => !!value);\n\n    for (let j = 0; j < combinaisons.length; j++) {\n      const combinaison = combinaisons[j].toLowerCase();\n      const tagIndex = loweredLanguageTags.indexOf(combinaison);\n\n      if (tagIndex !== -1) {\n        return { languageTag: languageTags[tagIndex], isRTL };\n      }\n    }\n  }\n}\n\nexport {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n} from \"./module\";\nexport * from \"./types\";\n\nexport default {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n\n  findBestAvailableLanguage,\n  addEventListener,\n  removeEventListener,\n};\n"]},"metadata":{},"sourceType":"module"}