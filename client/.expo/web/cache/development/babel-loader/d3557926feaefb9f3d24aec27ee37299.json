{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.deepmerge = factory());\n})(this, function () {\n  'use strict';\n\n  var isMergeableObject = function isMergeableObject(value) {\n    return isNonNullObject(value) && !isSpecial(value);\n  };\n  function isNonNullObject(value) {\n    return !!value && typeof value === 'object';\n  }\n  function isSpecial(value) {\n    var stringValue = Object.prototype.toString.call(value);\n    return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);\n  }\n\n  var canUseSymbol = typeof Symbol === 'function' && Symbol.for;\n  var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n  function isReactElement(value) {\n    return value.$$typeof === REACT_ELEMENT_TYPE;\n  }\n  function emptyTarget(val) {\n    return Array.isArray(val) ? [] : {};\n  }\n  function cloneUnlessOtherwiseSpecified(value, options) {\n    return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;\n  }\n  function defaultArrayMerge(target, source, options) {\n    return target.concat(source).map(function (element) {\n      return cloneUnlessOtherwiseSpecified(element, options);\n    });\n  }\n  function getMergeFunction(key, options) {\n    if (!options.customMerge) {\n      return deepmerge;\n    }\n    var customMerge = options.customMerge(key);\n    return typeof customMerge === 'function' ? customMerge : deepmerge;\n  }\n  function getEnumerableOwnPropertySymbols(target) {\n    return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function (symbol) {\n      return target.propertyIsEnumerable(symbol);\n    }) : [];\n  }\n  function getKeys(target) {\n    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n  }\n  function mergeObject(target, source, options) {\n    var destination = {};\n    if (options.isMergeableObject(target)) {\n      getKeys(target).forEach(function (key) {\n        destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n      });\n    }\n    getKeys(source).forEach(function (key) {\n      if (!options.isMergeableObject(source[key]) || !target[key]) {\n        destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n      } else {\n        destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n      }\n    });\n    return destination;\n  }\n  function deepmerge(target, source, options) {\n    options = options || {};\n    options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n    options.isMergeableObject = options.isMergeableObject || isMergeableObject;\n    var sourceIsArray = Array.isArray(source);\n    var targetIsArray = Array.isArray(target);\n    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n    if (!sourceAndTargetTypesMatch) {\n      return cloneUnlessOtherwiseSpecified(source, options);\n    } else if (sourceIsArray) {\n      return options.arrayMerge(target, source, options);\n    } else {\n      return mergeObject(target, source, options);\n    }\n  }\n  deepmerge.all = function deepmergeAll(array, options) {\n    if (!Array.isArray(array)) {\n      throw new Error('first argument should be an array');\n    }\n    return array.reduce(function (prev, next) {\n      return deepmerge(prev, next, options);\n    }, {});\n  };\n  var deepmerge_1 = deepmerge;\n  return deepmerge_1;\n});","map":{"version":3,"names":["global","factory","exports","module","define","amd","self","deepmerge","isMergeableObject","value","isNonNullObject","isSpecial","stringValue","Object","prototype","toString","call","isReactElement","canUseSymbol","Symbol","for","REACT_ELEMENT_TYPE","$$typeof","emptyTarget","val","Array","isArray","cloneUnlessOtherwiseSpecified","options","clone","defaultArrayMerge","target","source","concat","map","element","getMergeFunction","key","customMerge","getEnumerableOwnPropertySymbols","getOwnPropertySymbols","filter","symbol","propertyIsEnumerable","getKeys","keys","mergeObject","destination","forEach","arrayMerge","sourceIsArray","targetIsArray","sourceAndTargetTypesMatch","all","deepmergeAll","array","Error","reduce","prev","next","deepmerge_1"],"sources":["/home/samuel/Documentos/projetos/mobile/halk/client/node_modules/react-native-country-picker-modal/node_modules/deepmerge/dist/umd.js"],"sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global = global || self, global.deepmerge = factory());\n}(this, function () { 'use strict';\n\n\tvar isMergeableObject = function isMergeableObject(value) {\n\t\treturn isNonNullObject(value)\n\t\t\t&& !isSpecial(value)\n\t};\n\n\tfunction isNonNullObject(value) {\n\t\treturn !!value && typeof value === 'object'\n\t}\n\n\tfunction isSpecial(value) {\n\t\tvar stringValue = Object.prototype.toString.call(value);\n\n\t\treturn stringValue === '[object RegExp]'\n\t\t\t|| stringValue === '[object Date]'\n\t\t\t|| isReactElement(value)\n\t}\n\n\t// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\n\tvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\n\tvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\n\tfunction isReactElement(value) {\n\t\treturn value.$$typeof === REACT_ELEMENT_TYPE\n\t}\n\n\tfunction emptyTarget(val) {\n\t\treturn Array.isArray(val) ? [] : {}\n\t}\n\n\tfunction cloneUnlessOtherwiseSpecified(value, options) {\n\t\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t\t: value\n\t}\n\n\tfunction defaultArrayMerge(target, source, options) {\n\t\treturn target.concat(source).map(function(element) {\n\t\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t\t})\n\t}\n\n\tfunction getMergeFunction(key, options) {\n\t\tif (!options.customMerge) {\n\t\t\treturn deepmerge\n\t\t}\n\t\tvar customMerge = options.customMerge(key);\n\t\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n\t}\n\n\tfunction getEnumerableOwnPropertySymbols(target) {\n\t\treturn Object.getOwnPropertySymbols\n\t\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\t\treturn target.propertyIsEnumerable(symbol)\n\t\t\t})\n\t\t\t: []\n\t}\n\n\tfunction getKeys(target) {\n\t\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n\t}\n\n\tfunction mergeObject(target, source, options) {\n\t\tvar destination = {};\n\t\tif (options.isMergeableObject(target)) {\n\t\t\tgetKeys(target).forEach(function(key) {\n\t\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t\t});\n\t\t}\n\t\tgetKeys(source).forEach(function(key) {\n\t\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\n\t\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t\t} else {\n\t\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t\t}\n\t\t});\n\t\treturn destination\n\t}\n\n\tfunction deepmerge(target, source, options) {\n\t\toptions = options || {};\n\t\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\t\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n\t\tvar sourceIsArray = Array.isArray(source);\n\t\tvar targetIsArray = Array.isArray(target);\n\t\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\t\tif (!sourceAndTargetTypesMatch) {\n\t\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t\t} else if (sourceIsArray) {\n\t\t\treturn options.arrayMerge(target, source, options)\n\t\t} else {\n\t\t\treturn mergeObject(target, source, options)\n\t\t}\n\t}\n\n\tdeepmerge.all = function deepmergeAll(array, options) {\n\t\tif (!Array.isArray(array)) {\n\t\t\tthrow new Error('first argument should be an array')\n\t\t}\n\n\t\treturn array.reduce(function(prev, next) {\n\t\t\treturn deepmerge(prev, next, options)\n\t\t}, {})\n\t};\n\n\tvar deepmerge_1 = deepmerge;\n\n\treturn deepmerge_1;\n\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}