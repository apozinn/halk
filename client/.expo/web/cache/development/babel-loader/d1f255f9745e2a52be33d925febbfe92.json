{"ast":null,"code":"import React, { useContext, useEffect } from \"react\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { UserContext } from \"../../src/contexts/user\";\nimport { ChatsContext } from \"../../src/contexts/chats\";\nimport { Text } from \"../../src/components/Themed\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport NewChatButton from \"../../src/components/newChat\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Chats(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(UserContext),\n      user = _useContext.user,\n      logged = _useContext.logged,\n      updateUser = _useContext.updateUser;\n\n  var _useContext2 = useContext(ChatsContext),\n      chats = _useContext2.chats;\n\n  useEffect(function () {}, [chats, user]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [!logged ? _jsx(_Fragment, {\n      children: navigation.navigate(\"Welcome\")\n    }) : _jsx(ScrollView, {\n      style: {\n        padding: 5\n      },\n      children: !chats.length ? _jsxs(Pressable, {\n        style: function style(_ref2) {\n          var pressed = _ref2.pressed;\n          return [styles.chat, {\n            backgroundColor: pressed ? \"#222\" : \"transparent\"\n          }];\n        },\n        onPress: function onPress() {\n          return navigation.navigate(\"Chat\", {\n            id: '0'\n          });\n        },\n        children: [_jsxs(View, {\n          style: styles.leftContent,\n          children: [_jsx(Image, {\n            source: require(\"../../assets/images/userIcon.png\"),\n            style: styles.userIcon\n          }), _jsxs(View, {\n            style: {\n              justifyContent: \"center\"\n            },\n            children: [_jsx(Text, {\n              style: styles.username,\n              children: \"Halk\"\n            }), _jsx(Text, {\n              style: styles.messageContent,\n              children: \"Welcome to halk!\"\n            })]\n          })]\n        }), _jsxs(View, {\n          style: styles.rightContent,\n          children: [_jsxs(Text, {\n            style: styles.messageDate,\n            children: [new Date().getHours(), \":\", new Date().getMinutes()]\n          }), _jsx(Text, {\n            style: styles.unread,\n            children: \"1\"\n          })]\n        })]\n      }) : _jsx(_Fragment, {\n        children: chats.map(function (chat, index) {\n          var lastMessage = chat.messages[chat.messages.length - 1];\n          var unredMessages = chat.messages.filter(function (m) {\n            return m.unred;\n          });\n          return _jsxs(Pressable, {\n            style: function style(_ref3) {\n              var pressed = _ref3.pressed;\n              return [styles.chat, {\n                backgroundColor: pressed ? \"#222\" : \"transparent\"\n              }];\n            },\n            children: [_jsxs(View, {\n              style: styles.leftContent,\n              children: [_jsx(Image, {\n                source: {\n                  uri: chat.user.profile.avatar\n                },\n                style: styles.userIcon\n              }), _jsxs(View, {\n                style: {\n                  justifyContent: \"center\"\n                },\n                children: [_jsx(Text, {\n                  style: styles.username,\n                  children: chat.user.profile.name\n                }), _jsxs(Text, {\n                  style: styles.messageContent,\n                  children: [lastMessage.user.id === user.id ? _jsx(Ionicons, {\n                    name: \"checkmark-done\",\n                    size: 24,\n                    color: \"#222\"\n                  }) : _jsx(_Fragment, {}), lastMessage.content]\n                })]\n              })]\n            }), _jsxs(View, {\n              style: styles.rightContent,\n              children: [_jsx(Text, {\n                style: styles.messageDate,\n                children: lastMessage.createdAt\n              }), !unredMessages.length ? _jsx(_Fragment, {}) : _jsx(Text, {\n                style: styles.unread,\n                children: unredMessages.length\n              })]\n            })]\n          }, index);\n        })\n      })\n    }), _jsx(NewChatButton, {})]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  chat: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    borderRadius: 10,\n    padding: 5\n  },\n  leftContent: {\n    flexDirection: \"row\"\n  },\n  userIcon: {\n    width: 50,\n    height: 50,\n    borderRadius: 100,\n    marginRight: 10\n  },\n  username: {},\n  messageContent: {\n    fontSize: 13,\n    opacity: 0.7\n  },\n  rightContent: {\n    alignItems: \"center\"\n  },\n  messageDate: {\n    fontSize: 11,\n    marginBottom: 3\n  },\n  unread: {\n    backgroundColor: \"#2f95dc\",\n    borderRadius: 100,\n    minWidth: 15,\n    minHeight: 15,\n    textAlign: \"center\"\n  }\n});","map":{"version":3,"names":["React","useContext","useEffect","UserContext","ChatsContext","Text","Ionicons","NewChatButton","Chats","navigation","user","logged","updateUser","chats","styles","container","navigate","padding","length","pressed","chat","backgroundColor","id","leftContent","require","userIcon","justifyContent","username","messageContent","rightContent","messageDate","Date","getHours","getMinutes","unread","map","index","lastMessage","messages","unredMessages","filter","m","unred","uri","profile","avatar","name","content","createdAt","StyleSheet","create","flex","flexDirection","alignItems","borderRadius","width","height","marginRight","fontSize","opacity","marginBottom","minWidth","minHeight","textAlign"],"sources":["/home/samuel/Documentos/projetos/mobile/halk/client/screens/app/chats.tsx"],"sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport { Pressable, View, StyleSheet, ScrollView, Image } from \"react-native\";\nimport { RootTabScreenProps } from \"../../types\";\nimport { UserContext } from \"../../src/contexts/user\";\nimport { ChatsContext } from \"../../src/contexts/chats\";\nimport { Text } from \"../../src/components/Themed\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport NewChatButton from '../../src/components/newChat';\n\nexport default function Chats({ navigation }: RootTabScreenProps<\"Chats\">) {\n  const { user, logged, updateUser } = useContext(UserContext);\n  const { chats } = useContext(ChatsContext);\n\n  useEffect(() => {}, [chats, user]);\n\n  return (\n    <View style={styles.container}>\n      {!logged ? (\n        <>{navigation.navigate(\"Welcome\")}</>\n      ) : (\n        <ScrollView style={{ padding: 5 }}>\n          {!chats.length ? (\n            <Pressable\n              style={({ pressed }) => [\n                styles.chat,\n                { backgroundColor: pressed ? \"#222\" : \"transparent\" },\n              ]}\n              onPress={() => navigation.navigate(\"Chat\", {\n                id: '0',\n              })}\n            >\n              <View style={styles.leftContent}>\n                <Image\n                  source={require(\"../../assets/images/userIcon.png\")}\n                  style={styles.userIcon}\n                />\n                <View style={{ justifyContent: \"center\" }}>\n                  <Text style={styles.username}>Halk</Text>\n                  <Text style={styles.messageContent}>Welcome to halk!</Text>\n                </View>\n              </View>\n              <View style={styles.rightContent}>\n                <Text style={styles.messageDate}>\n                  {new Date().getHours()}:{new Date().getMinutes()}\n                </Text>\n                <Text style={styles.unread}>1</Text>\n              </View>\n            </Pressable>\n          ) : (\n            <>\n              {chats.map((chat, index) => {\n                const lastMessage = chat.messages[chat.messages.length - 1];\n                const unredMessages = chat.messages.filter((m) => m.unred);\n\n                return (\n                  <Pressable\n                    style={({ pressed }) => [\n                      styles.chat,\n                      { backgroundColor: pressed ? \"#222\" : \"transparent\" },\n                    ]}\n                    key={index}\n                  >\n                    <View style={styles.leftContent}>\n                      <Image\n                        source={{ uri: chat.user.profile.avatar }}\n                        style={styles.userIcon}\n                      />\n                      <View style={{ justifyContent: \"center\" }}>\n                        <Text style={styles.username}>\n                          {chat.user.profile.name}\n                        </Text>\n                        <Text style={styles.messageContent}>\n                          {lastMessage.user.id === user.id ? (\n                            <Ionicons\n                              name=\"checkmark-done\"\n                              size={24}\n                              color=\"#222\"\n                            />\n                          ) : (\n                            <></>\n                          )}\n                          {lastMessage.content}\n                        </Text>\n                      </View>\n                    </View>\n                    <View style={styles.rightContent}>\n                      <Text style={styles.messageDate}>\n                        {lastMessage.createdAt}\n                      </Text>\n                      {!unredMessages.length ? (\n                        <></>\n                      ) : (\n                        <Text style={styles.unread}>\n                          {unredMessages.length}\n                        </Text>\n                      )}\n                    </View>\n                  </Pressable>\n                );\n              })}\n            </>\n          )}\n        </ScrollView>\n      )}\n      <NewChatButton/>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  chat: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    borderRadius: 10,\n    padding: 5,\n  },\n  leftContent: {\n    flexDirection: \"row\",\n  },\n  userIcon: {\n    width: 50,\n    height: 50,\n    borderRadius: 100,\n    marginRight: 10,\n  },\n  username: {},\n  messageContent: {\n    fontSize: 13,\n    opacity: 0.7,\n  },\n  rightContent: {\n    alignItems: \"center\",\n  },\n  messageDate: {\n    fontSize: 11,\n    marginBottom: 3,\n  },\n  unread: {\n    backgroundColor: \"#2f95dc\",\n    borderRadius: 100,\n    minWidth: 15,\n    minHeight: 15,\n    textAlign: \"center\",\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}