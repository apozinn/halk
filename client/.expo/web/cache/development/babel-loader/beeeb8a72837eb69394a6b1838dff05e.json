{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { FlagType, CountryCodeList } from \"./types\";\nimport Fuse from 'fuse.js';\nvar imageJsonUrl = 'https://xcarpentier.github.io/react-native-country-picker-modal/countries/';\nvar localData = {\n  emojiCountries: undefined,\n  imageCountries: undefined\n};\nexport var loadDataAsync = function (data) {\n  return function () {\n    var dataType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : FlagType.EMOJI;\n    return new Promise(function (resolve, reject) {\n      switch (dataType) {\n        case FlagType.FLAT:\n          if (!data.imageCountries) {\n            fetch(imageJsonUrl).then(function (response) {\n              return response.json();\n            }).then(function (remoteData) {\n              data.imageCountries = remoteData;\n              resolve(data.imageCountries);\n            }).catch(reject);\n          } else {\n            resolve(data.imageCountries);\n          }\n          break;\n        default:\n          if (!data.emojiCountries) {\n            data.emojiCountries = require(\"./assets/data/countries-emoji.json\");\n            resolve(data.emojiCountries);\n          } else {\n            resolve(data.emojiCountries);\n          }\n          break;\n      }\n    });\n  };\n}(localData);\nexport var getEmojiFlagAsync = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var countryCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FR';\n    var countries = yield loadDataAsync();\n    if (!countries) {\n      throw new Error('Unable to find emoji because emojiCountries is undefined');\n    }\n    return countries[countryCode].flag;\n  });\n  return function getEmojiFlagAsync() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getImageFlagAsync = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    var countryCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FR';\n    var countries = yield loadDataAsync(FlagType.FLAT);\n    if (!countries) {\n      throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].flag;\n  });\n  return function getImageFlagAsync() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getCountryNameAsync = function () {\n  var _ref3 = _asyncToGenerator(function* () {\n    var countryCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FR';\n    var translation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'common';\n    var countries = yield loadDataAsync();\n    if (!countries) {\n      throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].name ? countries[countryCode].name[translation] : countries[countryCode].name['common'];\n  });\n  return function getCountryNameAsync() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getCountryCallingCodeAsync = function () {\n  var _ref4 = _asyncToGenerator(function* (countryCode) {\n    var countries = yield loadDataAsync();\n    if (!countries) {\n      throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].callingCode[0];\n  });\n  return function getCountryCallingCodeAsync(_x) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getCountryCurrencyAsync = function () {\n  var _ref5 = _asyncToGenerator(function* (countryCode) {\n    var countries = yield loadDataAsync();\n    if (!countries) {\n      throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].currency[0];\n  });\n  return function getCountryCurrencyAsync(_x2) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nvar isCountryPresent = function isCountryPresent(countries) {\n  return function (countryCode) {\n    return !!countries[countryCode];\n  };\n};\nvar isRegion = function isRegion(region) {\n  return function (country) {\n    return region ? country.region === region : true;\n  };\n};\nvar isSubregion = function isSubregion(subregion) {\n  return function (country) {\n    return subregion ? country.subregion === subregion : true;\n  };\n};\nvar isIncluded = function isIncluded(countryCodes) {\n  return function (country) {\n    return countryCodes && countryCodes.length > 0 ? countryCodes.includes(country.cca2) : true;\n  };\n};\nvar isExcluded = function isExcluded(excludeCountries) {\n  return function (country) {\n    return excludeCountries && excludeCountries.length > 0 ? !excludeCountries.includes(country.cca2) : true;\n  };\n};\nexport var getCountriesAsync = function () {\n  var _ref6 = _asyncToGenerator(function* (flagType) {\n    var translation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'common';\n    var region = arguments.length > 2 ? arguments[2] : undefined;\n    var subregion = arguments.length > 3 ? arguments[3] : undefined;\n    var countryCodes = arguments.length > 4 ? arguments[4] : undefined;\n    var excludeCountries = arguments.length > 5 ? arguments[5] : undefined;\n    var preferredCountries = arguments.length > 6 ? arguments[6] : undefined;\n    var withAlphaFilter = arguments.length > 7 ? arguments[7] : undefined;\n    var countriesRaw = yield loadDataAsync(flagType);\n    if (!countriesRaw) {\n      return [];\n    }\n    if (preferredCountries && !withAlphaFilter) {\n      var newCountryCodeList = [].concat(_toConsumableArray(preferredCountries), _toConsumableArray(CountryCodeList.filter(function (code) {\n        return !preferredCountries.includes(code);\n      })));\n      var countries = newCountryCodeList.filter(isCountryPresent(countriesRaw)).map(function (cca2) {\n        return _objectSpread({\n          cca2: cca2\n        }, _objectSpread(_objectSpread({}, countriesRaw[cca2]), {}, {\n          name: countriesRaw[cca2].name[translation] || countriesRaw[cca2].name['common']\n        }));\n      }).filter(isRegion(region)).filter(isSubregion(subregion)).filter(isIncluded(countryCodes)).filter(isExcluded(excludeCountries));\n      return countries;\n    } else {\n      var _countries = CountryCodeList.filter(isCountryPresent(countriesRaw)).map(function (cca2) {\n        return _objectSpread({\n          cca2: cca2\n        }, _objectSpread(_objectSpread({}, countriesRaw[cca2]), {}, {\n          name: countriesRaw[cca2].name[translation] || countriesRaw[cca2].name['common']\n        }));\n      }).filter(isRegion(region)).filter(isSubregion(subregion)).filter(isIncluded(countryCodes)).filter(isExcluded(excludeCountries)).sort(function (country1, country2) {\n        return country1.name.localeCompare(country2.name);\n      });\n      return _countries;\n    }\n  });\n  return function getCountriesAsync(_x3) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nvar DEFAULT_FUSE_OPTION = {\n  shouldSort: true,\n  threshold: 0.3,\n  location: 0,\n  distance: 100,\n  maxPatternLength: 32,\n  minMatchCharLength: 1,\n  keys: ['name', 'cca2', 'callingCode']\n};\nvar fuse;\nexport var search = function search() {\n  var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_FUSE_OPTION;\n  if (data.length === 0) {\n    return [];\n  }\n  if (!fuse) {\n    fuse = new Fuse(data, options);\n  }\n  if (filter && filter !== '') {\n    var result = fuse.search(filter);\n    return result;\n  } else {\n    return data;\n  }\n};\nvar uniq = function uniq(arr) {\n  return Array.from(new Set(arr));\n};\nexport var getLetters = function getLetters(countries) {\n  return uniq(countries.map(function (country) {\n    return country.name.substr(0, 1).toLocaleUpperCase();\n  }).sort(function (l1, l2) {\n    return l1.localeCompare(l2);\n  }));\n};\nexport var getCountryInfoAsync = function () {\n  var _ref8 = _asyncToGenerator(function* (_ref7) {\n    var countryCode = _ref7.countryCode,\n      translation = _ref7.translation;\n    var countryName = yield getCountryNameAsync(countryCode, translation || 'common');\n    var currency = yield getCountryCurrencyAsync(countryCode);\n    var callingCode = yield getCountryCallingCodeAsync(countryCode);\n    return {\n      countryName: countryName,\n      currency: currency,\n      callingCode: callingCode\n    };\n  });\n  return function getCountryInfoAsync(_x4) {\n    return _ref8.apply(this, arguments);\n  };\n}();","map":{"version":3,"mappings":"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","names":["FlagType","CountryCodeList","Fuse","imageJsonUrl","localData","emojiCountries","undefined","imageCountries","loadDataAsync","data","dataType","EMOJI","Promise","resolve","reject","FLAT","fetch","then","response","json","remoteData","catch","require","getEmojiFlagAsync","countryCode","countries","Error","flag","getImageFlagAsync","getCountryNameAsync","translation","name","getCountryCallingCodeAsync","callingCode","getCountryCurrencyAsync","currency","isCountryPresent","isRegion","region","country","isSubregion","subregion","isIncluded","countryCodes","length","includes","cca2","isExcluded","excludeCountries","getCountriesAsync","flagType","preferredCountries","withAlphaFilter","countriesRaw","newCountryCodeList","filter","code","map","sort","country1","country2","localeCompare","DEFAULT_FUSE_OPTION","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","keys","fuse","search","options","result","uniq","arr","Array","from","Set","getLetters","substr","toLocaleUpperCase","l1","l2","getCountryInfoAsync","countryName"],"sourceRoot":"","sources":["../src/CountryService.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}