{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport io from 'socket.io-client';\nimport * as dotenv from 'dotenv';\nimport * as uuid from 'uuid';\ndotenv.config();\n\nvar Socket = function () {\n  function Socket() {\n    _classCallCheck(this, Socket);\n\n    this.socket = io(\"http://localhost:3000\", {\n      transports: [\"websocket\"]\n    });\n  }\n\n  _createClass(Socket, [{\n    key: \"get\",\n    value: function get() {\n      return this.socket;\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(text) {\n      var message = {\n        id: uuid.v4(),\n        text: text,\n        author: {}\n      };\n      this.socket.emit(\"message\", message);\n    }\n  }, {\n    key: \"getMessages\",\n    value: function () {\n      var _getMessages = _asyncToGenerator(function* (room) {\n        if (!room) return;\n        return this.socket.emit(\"getMessages\", function (msgs) {\n          return msgs;\n        });\n      });\n\n      function getMessages(_x) {\n        return _getMessages.apply(this, arguments);\n      }\n\n      return getMessages;\n    }()\n  }]);\n\n  return Socket;\n}();\n\nexport { Socket as default };","map":{"version":3,"names":["io","dotenv","uuid","config","Socket","socket","transports","text","message","id","v4","author","emit","room","msgs"],"sources":["/home/samuel/Documentos/projetos/mobile/halk/src/utils/socket.ts"],"sourcesContent":["import io from 'socket.io-client';\nimport * as dotenv from 'dotenv';\nimport * as uuid from 'uuid';\ndotenv.config();\n\nexport default class Socket {\n  constructor() {\n    this.socket = io(\"http://localhost:3000\", {\n      transports: [\"websocket\"],\n    });\n  }\n\n  public get() { return this.socket; }\n\n  public sendMessage(text: string) {\n    const message = {\n      id: uuid.v4(),\n      text,\n      author: {},\n    };\n\n    this.socket.emit(\"message\", message);\n  }\n\n  public async getMessages(room: string) {\n    if(!room) return;\n    return this.socket.emit(\"getMessages\", (msgs) => msgs);\n  }\n}\n"],"mappings":";;;AAAA,OAAOA,EAAP,MAAe,kBAAf;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AACAD,MAAM,CAACE,MAAP;;IAEqBC,M;EACnB,kBAAc;IAAA;;IACZ,KAAKC,MAAL,GAAcL,EAAE,CAAC,uBAAD,EAA0B;MACxCM,UAAU,EAAE,CAAC,WAAD;IAD4B,CAA1B,CAAhB;EAGD;;;;WAED,eAAa;MAAE,OAAO,KAAKD,MAAZ;IAAqB;;;WAEpC,qBAAmBE,IAAnB,EAAiC;MAC/B,IAAMC,OAAO,GAAG;QACdC,EAAE,EAAEP,IAAI,CAACQ,EAAL,EADU;QAEdH,IAAI,EAAJA,IAFc;QAGdI,MAAM,EAAE;MAHM,CAAhB;MAMA,KAAKN,MAAL,CAAYO,IAAZ,CAAiB,SAAjB,EAA4BJ,OAA5B;IACD;;;;2CAED,WAAyBK,IAAzB,EAAuC;QACrC,IAAG,CAACA,IAAJ,EAAU;QACV,OAAO,KAAKR,MAAL,CAAYO,IAAZ,CAAiB,aAAjB,EAAgC,UAACE,IAAD;UAAA,OAAUA,IAAV;QAAA,CAAhC,CAAP;MACD,C;;;;;;;;;;;;;SAtBkBV,M"},"metadata":{},"sourceType":"module"}