{"ast":null,"code":"var isErrorHandlingEnabled = true;\nvar developmentBuildMessage = \"If you're trying to use a module that is not supported in Expo Go, you need to create a development build of your app. See https://docs.expo.dev/development/introduction/ for more info.\";\n\nfunction customizeUnavailableMessage(error) {\n  error.message += '\\n\\n' + developmentBuildMessage;\n}\n\nfunction customizeModuleIsMissingMessage(error) {\n  error.message = \"Your JavaScript code tried to access a native module that doesn't exist. \\n\\n\" + developmentBuildMessage;\n}\n\nfunction customizeError(error) {\n  if ('code' in error && error.code === 'ERR_UNAVAILABLE') {\n    customizeUnavailableMessage(error);\n  } else if (error.message.includes('Native module cannot be null') || error.message.includes('`new NativeEventEmitter()` requires a non-null argument.')) {\n    customizeModuleIsMissingMessage(error);\n  }\n}\n\nfunction errorHandler(originalHandler, error, isFatal) {\n  if (error instanceof Error) {\n    customizeError(error);\n  }\n\n  originalHandler(error, isFatal);\n}\n\nexport function createErrorHandler(originalHandler) {\n  return function (error, isFatal) {\n    if (isErrorHandlingEnabled) {\n      errorHandler(originalHandler, error, isFatal);\n      return;\n    }\n\n    originalHandler(error, isFatal);\n  };\n}\nexport function disableErrorHandling() {\n  isErrorHandlingEnabled = false;\n}","map":{"version":3,"mappings":"AAGA,IAAIA,sBAAsB,GAAG,IAA7B;AAEA,IAAMC,uBAAuB,8LAA7B;;AAEA,SAASC,2BAAT,CAAqCC,KAArC,EAAsD;EACpDA,KAAK,CAACC,OAAN,IAAiB,SAASH,uBAA1B;AACD;;AAED,SAASI,+BAAT,CAAyCF,KAAzC,EAAqD;EACnDA,KAAK,CAACC,OAAN,qFAEAH,uBAFA;AAGD;;AAED,SAASK,cAAT,CAAwBH,KAAxB,EAAiD;EAC/C,IAAI,UAAUA,KAAV,IAAmBA,KAAK,CAACI,IAAN,KAAe,iBAAtC,EAAyD;IACvDL,2BAA2B,CAACC,KAAD,CAA3B;EACD,CAFD,MAEO,IACLA,KAAK,CAACC,OAAN,CAAcI,QAAd,CAAuB,8BAAvB,KACAL,KAAK,CAACC,OAAN,CAAcI,QAAd,CAAuB,0DAAvB,CAFK,EAGL;IACAH,+BAA+B,CAACF,KAAD,CAA/B;EACD;AACF;;AAED,SAASM,YAAT,CAAsBC,eAAtB,EAAuCP,KAAvC,EAA8CQ,OAA9C,EAAqD;EACnD,IAAIR,KAAK,YAAYS,KAArB,EAA4B;IAC1BN,cAAc,CAACH,KAAD,CAAd;EACD;;EACDO,eAAe,CAACP,KAAD,EAAQQ,OAAR,CAAf;AACD;;AAED,OAAM,SAAUE,kBAAV,CAA6BH,eAA7B,EAA4C;EAChD,OAAO,UAACP,KAAD,EAAQQ,OAAR,EAAmB;IACxB,IAAIX,sBAAJ,EAA4B;MAC1BS,YAAY,CAACC,eAAD,EAAkBP,KAAlB,EAAyBQ,OAAzB,CAAZ;MACA;IACD;;IAEDD,eAAe,CAACP,KAAD,EAAQQ,OAAR,CAAf;EACD,CAPD;AAQD;AAED,OAAM,SAAUG,oBAAV,GAA8B;EAClCd,sBAAsB,GAAG,KAAzB;AACD","names":["isErrorHandlingEnabled","developmentBuildMessage","customizeUnavailableMessage","error","message","customizeModuleIsMissingMessage","customizeError","code","includes","errorHandler","originalHandler","isFatal","Error","createErrorHandler","disableErrorHandling"],"sourceRoot":"","sources":["../../src/errors/ExpoErrorManager.ts"],"sourcesContent":["// Similar interface to the one used in expo modules.\ntype CodedError = Error & { code?: string };\n\nlet isErrorHandlingEnabled = true;\n\nconst developmentBuildMessage = `If you're trying to use a module that is not supported in Expo Go, you need to create a development build of your app. See https://docs.expo.dev/development/introduction/ for more info.`;\n\nfunction customizeUnavailableMessage(error: CodedError) {\n  error.message += '\\n\\n' + developmentBuildMessage;\n}\n\nfunction customizeModuleIsMissingMessage(error: Error) {\n  error.message = `Your JavaScript code tried to access a native module that doesn't exist. \n\n${developmentBuildMessage}`;\n}\n\nfunction customizeError(error: Error | CodedError) {\n  if ('code' in error && error.code === 'ERR_UNAVAILABLE') {\n    customizeUnavailableMessage(error);\n  } else if (\n    error.message.includes('Native module cannot be null') || // RN 0.64 and below message\n    error.message.includes('`new NativeEventEmitter()` requires a non-null argument.') // RN 0.65+ message\n  ) {\n    customizeModuleIsMissingMessage(error);\n  }\n}\n\nfunction errorHandler(originalHandler, error, isFatal) {\n  if (error instanceof Error) {\n    customizeError(error);\n  }\n  originalHandler(error, isFatal);\n}\n\nexport function createErrorHandler(originalHandler) {\n  return (error, isFatal) => {\n    if (isErrorHandlingEnabled) {\n      errorHandler(originalHandler, error, isFatal);\n      return;\n    }\n\n    originalHandler(error, isFatal);\n  };\n}\n\nexport function disableErrorHandling() {\n  isErrorHandlingEnabled = false;\n}\n"]},"metadata":{},"sourceType":"module"}