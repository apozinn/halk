{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useState } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Text } from \"../../src/components/Themed\";\nimport { CodeField, Cursor, useBlurOnFulfill, useClearByFocusCell } from 'react-native-confirmation-code-field';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ReceiveCode(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var ref = useBlurOnFulfill({\n    value: value,\n    cellCount: 6\n  });\n\n  var _useClearByFocusCell = useClearByFocusCell({\n    value: value,\n    setValue: setValue\n  }),\n      _useClearByFocusCell2 = _slicedToArray(_useClearByFocusCell, 2),\n      props = _useClearByFocusCell2[0],\n      getCellOnLayoutHandler = _useClearByFocusCell2[1];\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Image, {\n      source: require(\"../../assets/images/sendSms.png\"),\n      style: styles.image\n    }), _jsx(View, {\n      style: styles.codeContainer,\n      children: _jsx(CodeField, _objectSpread(_objectSpread({\n        ref: ref\n      }, props), {}, {\n        value: value,\n        onChangeText: setValue,\n        cellCount: 6,\n        rootStyle: styles.codeFieldRoot,\n        keyboardType: \"number-pad\",\n        textContentType: \"oneTimeCode\",\n        renderCell: function renderCell(_ref2) {\n          var index = _ref2.index,\n              symbol = _ref2.symbol,\n              isFocused = _ref2.isFocused;\n          return _jsx(Text, {\n            style: [styles.cell, isFocused && styles.focusCell],\n            onLayout: getCellOnLayoutHandler(index),\n            children: symbol || (isFocused ? _jsx(Cursor, {}) : null)\n          }, index);\n        }\n      }))\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight,\n    alignItems: 'center'\n  },\n  image: {\n    width: 300,\n    height: 400\n  },\n  codeFieldRoot: {\n    marginTop: 20\n  },\n  cell: {\n    width: 40,\n    height: 50,\n    lineHeight: 38,\n    fontSize: 24,\n    borderWidth: 2,\n    borderColor: '#00000030',\n    textAlign: 'center',\n    alignItems: 'flex-end',\n    borderRadius: 5,\n    marginRight: 5\n  },\n  focusCell: {\n    borderColor: '#00000030'\n  },\n  codeContainer: {\n    margin: 10\n  }\n});","map":{"version":3,"names":["useState","Text","CodeField","Cursor","useBlurOnFulfill","useClearByFocusCell","ReceiveCode","navigation","value","setValue","ref","cellCount","props","getCellOnLayoutHandler","styles","container","require","image","codeContainer","codeFieldRoot","index","symbol","isFocused","cell","focusCell","StyleSheet","create","flex","marginTop","StatusBar","currentHeight","alignItems","width","height","lineHeight","fontSize","borderWidth","borderColor","textAlign","borderRadius","marginRight","margin"],"sources":["/home/samuel/Documentos/projetos/mobile/halk/screens/register/receiveCode.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { Image, StatusBar, StyleSheet, View } from \"react-native\";\nimport { RootStackScreenProps } from \"../../types\";\nimport { Text } from \"../../src/components/Themed\";\nimport {\n  CodeField,\n  Cursor,\n  useBlurOnFulfill,\n  useClearByFocusCell,\n} from 'react-native-confirmation-code-field'\n\nexport default function ReceiveCode({ navigation }: RootStackScreenProps<\"ReceiveCode\">) {\n  const [value, setValue] = useState('');\n  const ref = useBlurOnFulfill({value, cellCount: 6});\n  const [props, getCellOnLayoutHandler] = useClearByFocusCell({\n    value,\n    setValue,\n  });\n  \n  return (\n    <View style={styles.container}>\n      <Image source={require('../../assets/images/sendSms.png')} style={styles.image}/>\n      <View style={styles.codeContainer}>\n      <CodeField\n        ref={ref}\n        {...props}\n        value={value}\n        onChangeText={setValue}\n        cellCount={6}\n        rootStyle={styles.codeFieldRoot}\n        keyboardType=\"number-pad\"\n        textContentType=\"oneTimeCode\"\n        renderCell={({index, symbol, isFocused}) => (\n          <Text\n            key={index}\n            style={[styles.cell, isFocused && styles.focusCell]}\n            onLayout={getCellOnLayoutHandler(index)}>\n            {symbol || (isFocused ? <Cursor /> : null)}\n          </Text>\n        )}\n      />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight,\n    alignItems: 'center',\n  },\n  image: {\n    width: 300,\n    height: 400,\n  },\n  codeFieldRoot: {marginTop: 20},\n  cell: {\n    width: 40,\n    height: 50,\n    lineHeight: 38,\n    fontSize: 24,\n    borderWidth: 2,\n    borderColor: '#00000030',\n    textAlign: 'center',\n    alignItems: 'flex-end',\n    borderRadius: 5,\n    marginRight: 5,\n  },\n  focusCell: {\n    borderColor: '#00000030',\n  },\n  codeContainer: {\n    margin: 10,\n  }\n});"],"mappings":";;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;;;AAGA,SAASC,IAAT;AACA,SACEC,SADF,EAEEC,MAFF,EAGEC,gBAHF,EAIEC,mBAJF,QAKO,sCALP;;;AAOA,eAAe,SAASC,WAAT,OAA0E;EAAA,IAAnDC,UAAmD,QAAnDA,UAAmD;;EACvF,gBAA0BP,QAAQ,CAAC,EAAD,CAAlC;EAAA;EAAA,IAAOQ,KAAP;EAAA,IAAcC,QAAd;;EACA,IAAMC,GAAG,GAAGN,gBAAgB,CAAC;IAACI,KAAK,EAALA,KAAD;IAAQG,SAAS,EAAE;EAAnB,CAAD,CAA5B;;EACA,2BAAwCN,mBAAmB,CAAC;IAC1DG,KAAK,EAALA,KAD0D;IAE1DC,QAAQ,EAARA;EAF0D,CAAD,CAA3D;EAAA;EAAA,IAAOG,KAAP;EAAA,IAAcC,sBAAd;;EAKA,OACE,MAAC,IAAD;IAAM,KAAK,EAAEC,MAAM,CAACC,SAApB;IAAA,WACE,KAAC,KAAD;MAAO,MAAM,EAAEC,OAAO,mCAAtB;MAA2D,KAAK,EAAEF,MAAM,CAACG;IAAzE,EADF,EAEE,KAAC,IAAD;MAAM,KAAK,EAAEH,MAAM,CAACI,aAApB;MAAA,UACA,KAAC,SAAD;QACE,GAAG,EAAER;MADP,GAEME,KAFN;QAGE,KAAK,EAAEJ,KAHT;QAIE,YAAY,EAAEC,QAJhB;QAKE,SAAS,EAAE,CALb;QAME,SAAS,EAAEK,MAAM,CAACK,aANpB;QAOE,YAAY,EAAC,YAPf;QAQE,eAAe,EAAC,aARlB;QASE,UAAU,EAAE;UAAA,IAAEC,KAAF,SAAEA,KAAF;UAAA,IAASC,MAAT,SAASA,MAAT;UAAA,IAAiBC,SAAjB,SAAiBA,SAAjB;UAAA,OACV,KAAC,IAAD;YAEE,KAAK,EAAE,CAACR,MAAM,CAACS,IAAR,EAAcD,SAAS,IAAIR,MAAM,CAACU,SAAlC,CAFT;YAGE,QAAQ,EAAEX,sBAAsB,CAACO,KAAD,CAHlC;YAAA,UAIGC,MAAM,KAAKC,SAAS,GAAG,KAAC,MAAD,KAAH,GAAgB,IAA9B;UAJT,GACOF,KADP,CADU;QAAA;MATd;IADA,EAFF;EAAA,EADF;AAyBD;AAED,IAAMN,MAAM,GAAGW,UAAU,CAACC,MAAX,CAAkB;EAC/BX,SAAS,EAAE;IACTY,IAAI,EAAE,CADG;IAETC,SAAS,EAAEC,SAAS,CAACC,aAFZ;IAGTC,UAAU,EAAE;EAHH,CADoB;EAM/Bd,KAAK,EAAE;IACLe,KAAK,EAAE,GADF;IAELC,MAAM,EAAE;EAFH,CANwB;EAU/Bd,aAAa,EAAE;IAACS,SAAS,EAAE;EAAZ,CAVgB;EAW/BL,IAAI,EAAE;IACJS,KAAK,EAAE,EADH;IAEJC,MAAM,EAAE,EAFJ;IAGJC,UAAU,EAAE,EAHR;IAIJC,QAAQ,EAAE,EAJN;IAKJC,WAAW,EAAE,CALT;IAMJC,WAAW,EAAE,WANT;IAOJC,SAAS,EAAE,QAPP;IAQJP,UAAU,EAAE,UARR;IASJQ,YAAY,EAAE,CATV;IAUJC,WAAW,EAAE;EAVT,CAXyB;EAuB/BhB,SAAS,EAAE;IACTa,WAAW,EAAE;EADJ,CAvBoB;EA0B/BnB,aAAa,EAAE;IACbuB,MAAM,EAAE;EADK;AA1BgB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}