{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TextInput, Text } from \"../../src/components/Themed\";\nimport Socket from \"../../src/utils/socket\";\nimport { UserContext } from \"../../src/contexts/user\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Chat(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      socket = _useState2[0],\n      setSocket = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      messages = _useState4[0],\n      setMessages = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      text = _useState6[0],\n      setText = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      value = _useState8[0],\n      setValue = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      name = _useState10[0],\n      setName = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      ready = _useState12[0],\n      setReady = _useState12[1];\n\n  var _useContext = useContext(UserContext),\n      user = _useContext.user;\n\n  useEffect(function () {\n    if (user.id) {\n      new Socket().get().then(function (socket) {\n        socket.emit(\"getMessages\", function (msgs) {\n          return setMessages(msgs);\n        });\n      });\n    }\n  }, [user]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      children: _jsx(View, {})\n    }), _jsx(TextInput, {\n      value: name,\n      onChangeText: function onChangeText(value) {\n        return setName(value);\n      },\n      placeholder: \"enter your name\"\n    }), _jsx(View, {\n      style: styles.messageCard,\n      children: messages.map(function (message, index) {\n        return _jsx(Text, {\n          style: message.author.id === user.id ? styles.myMessage : styles.otherMessage,\n          children: message.text\n        }, index);\n      })\n    }), _jsx(TextInput, {\n      value: text,\n      onChangeText: function onChangeText(value) {\n        return setText(value);\n      },\n      placeholder: \"Send a message\"\n    }), _jsx(Button, {\n      title: \"Send\",\n      onPress: function onPress() {\n        return new Socket().sendMessage(text);\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight\n  },\n  messageCard: {\n    borderWidth: 1,\n    borderColor: '#222'\n  },\n  myMessage: {\n    backgroundColor: 'blue'\n  },\n  otherMessage: {\n    backgroundColor: 'gray'\n  }\n});","map":{"version":3,"names":["React","useEffect","useState","useContext","TextInput","Text","Socket","UserContext","Chat","navigation","socket","setSocket","messages","setMessages","text","setText","value","setValue","name","setName","ready","setReady","user","id","get","then","emit","msgs","styles","container","messageCard","map","message","index","author","myMessage","otherMessage","sendMessage","StyleSheet","create","flex","marginTop","StatusBar","currentHeight","borderWidth","borderColor","backgroundColor"],"sources":["/home/samuel/Documentos/projetos/mobile/halk/screens/chat/chat.tsx"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { Button, StatusBar, StyleSheet, View } from \"react-native\";\nimport { RootStackScreenProps } from \"../../types\";\nimport { TextInput, Text } from '../../src/components/Themed';\nimport Socket from '../../src/utils/socket';\nimport { UserContext } from '../../src/contexts/user';\n\nexport default function Chat({ navigation }: RootStackScreenProps<\"Chat\">) {\n  const [socket, setSocket] = useState();\n  const [messages, setMessages] = useState([]);\n  const [text, setText] = useState(\"\");\n  const [value, setValue] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [ready, setReady] = useState(false);\n\n  const { user } = useContext(UserContext);\n\n  useEffect(() => {\n    if(user.id) {\n      new Socket().get().then((socket) => {\n        socket.emit(\"getMessages\", (msgs) => setMessages(msgs));\n      });\n    }\n  }, [user]);\n\n  return (\n    <View style={styles.container}>\n    <View>\n    <View>\n    </View>\n    </View>\n      <TextInput value={name} onChangeText={(value) => setName(value)} placeholder=\"enter your name\"/>\n      <View style={styles.messageCard}>\n      {messages.map((message, index) => (\n        <Text key={index} style={message.author.id === user.id ? styles.myMessage : styles.otherMessage}>\n          {message.text}\n        </Text>\n      ))}\n      </View>\n      <TextInput value={text} onChangeText={(value) => setText(value)} placeholder='Send a message'/>\n      <Button title='Send' onPress={() => new Socket().sendMessage(text)}/>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight,\n  },\n  messageCard: {\n    borderWidth: 1,\n    borderColor: '#222',\n  },\n  myMessage: {\n    backgroundColor: 'blue',\n  },\n  otherMessage: {\n    backgroundColor: 'gray',\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}