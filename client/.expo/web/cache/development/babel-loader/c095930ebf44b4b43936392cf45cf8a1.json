{"ast":null,"code":"import { createContext } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n;\nexport var UserContext = createContext({});\nexport var UserProvider = function UserProvider(_ref) {\n  var children = _ref.children;\n  return _jsx(UserContext.Provider, {\n    value: {},\n    children: children\n  });\n};","map":{"version":3,"names":["createContext","UserContext","UserProvider","children"],"sources":["/home/samuel/Documentos/projetos/mobile/halk/client/src/contexts/user.tsx"],"sourcesContent":["import { createContext, useEffect, useState } from 'react';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\ninterface UserInterface {\n    logged: boolean;\n    user: {\n        id: string;\n        phone: string;\n        profile: {\n            name: string;\n            username: string;\n            avatar: string;\n            bio: string;\n        };\n    };\n    updateUser: Function;\n};\n\nexport const UserContext = createContext<UserInterface>({} as UserInterface);\n\nexport const UserProvider = ({children}:any) => {\n  // const [loads, setLoads] = useState(0);\n  //\n  //   const updateUser = (newUser:any) => {\n  //       setUser({\n  //           logged: newUser.logged,\n  //           user: newUser.user,\n  //           updateUser: updateUser,\n  //       });\n  //   }\n  //\n  //   const initialValue: UserInterface = {\n  //       logged: false,\n  //       user: {\n  //           id: '',\n  //           phone: '',\n  //           profile: {\n  //               name: '',\n  //               username: '',\n  //               avatar: '',\n  //               bio: '',\n  //           },\n  //       },\n  //       updateUser: updateUser,\n  //   };\n  //\n  //   const [user, setUser] = useState<UserInterface>(initialValue);\n  //\n  //   useEffect(() => {\n  //       AsyncStorage.getItem('user').then((data:any) => {\n  //           const dt = JSON.parse(data);\n  //\n  //           if(dt) {\n  //               updateUser(dt);\n  //           } else updateUser(initialValue);\n  //       });\n  //   }, []);\n  //\n  //   useEffect(() => {\n  //       if(user !== initialValue) {\n  //           AsyncStorage.setItem('user', JSON.stringify(user));\n  //       }\n  //\n  //       setLoads(loads+1);\n  //   }, [user]);\n  //\n  //   if(loads === 0) return;\n\n    return (\n        <UserContext.Provider value={{}}>\n            {children}\n        </UserContext.Provider>\n    )\n}\n"],"mappings":"AAAA,SAASA,aAAT,QAAmD,OAAnD;;AAgBC;AAED,OAAO,IAAMC,WAAW,GAAGD,aAAa,CAAgB,EAAhB,CAAjC;AAEP,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe,OAAoB;EAAA,IAAlBC,QAAkB,QAAlBA,QAAkB;EAgD5C,OACI,KAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAE,EAA7B;IAAA,UACKA;EADL,EADJ;AAKH,CArDM"},"metadata":{},"sourceType":"module"}