{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport io from \"socket.io-client\";\nimport { Cipher } from \"../../middleware/crypto\";\nexport var SocketController = function () {\n  function SocketController(props) {\n    _classCallCheck(this, SocketController);\n\n    this.user = props.user;\n    this.updateUser = props.updateUser;\n    this.chats = props.chats;\n    this.updateChats = props.updateChats;\n    this.socket = props.socket;\n    this.loadEvents();\n  }\n\n  _createClass(SocketController, [{\n    key: \"loadEvents\",\n    value: function loadEvents() {}\n  }], [{\n    key: \"joinedChat\",\n    value: function joinedChat(_ref) {\n      var chats = _ref.chats,\n          chat = _ref.chat,\n          socket = _ref.socket;\n      socket.emit(\"joinRoom\", {\n        room: chat.id,\n        otherUser: chat.user.id\n      });\n      socket.emit(\"verifyIfUserIsOnline\", {\n        userId: chat.user.id\n      });\n      socket.on(\"readMessage\", function (p) {\n        chats.filter(function (c) {\n          return c.id === chat.id;\n        }).map(function (c) {\n          c.messages.map(function (m) {\n            return m.read === true;\n          });\n        });\n        updateChats({\n          chats: chats\n        });\n      });\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(_ref2) {\n      var user = _ref2.user,\n          chats = _ref2.chats,\n          updateChats = _ref2.updateChats,\n          chat = _ref2.chat,\n          socket = _ref2.socket,\n          text = _ref2.text;\n      var timeNow = new Date().getTime();\n      var message = {\n        chat: {\n          id: chat.id,\n          key: chat.key\n        },\n        author: user,\n        read: false,\n        createdAt: timeNow,\n        content: Cipher(text, chat.key),\n        id: \"\" + timeNow + Math.floor(Math.random() * (100000000 - 1000000 + 1) + 1000000)\n      };\n\n      if (chat.newChat) {\n        socket.emit(\"sendMessage\", {\n          room: chat.id,\n          toUser: chat.user.id,\n          message: message,\n          newChat: true,\n          key: chat.key\n        });\n        var thisChat = chats.filter(function (c) {\n          return c.id === chat.id;\n        })[0];\n        delete thisChat.newChat;\n        updateChats({\n          chats: chats\n        });\n      } else {\n        socket.emit(\"sendMessage\", {\n          room: chat.id,\n          toUser: chat.user.id,\n          message: message\n        });\n      }\n\n      chats.filter(function (c) {\n        return c.id === chat.id;\n      }).map(function (c) {\n        return c.messages.push(message);\n      });\n      updateChats({\n        chats: chats\n      });\n    }\n  }, {\n    key: \"sendHalkMessage\",\n    value: function sendHalkMessage() {\n      var timeNow = new Date().getTime();\n      var halkUser = {\n        id: \"0\",\n        phone: \"+00\",\n        profile: {\n          name: \"Halk\",\n          username: \"Halk\",\n          avatar: require(\"../../assets/images/icon.png\"),\n          bio: \"Official account of the team Halk\"\n        }\n      };\n      var halkChat = {\n        id: \"a384b2bc-1a3b-49d3-bdf5-1be72350c494\",\n        user: halkUser,\n        key: \"0000\",\n        messages: [{\n          author: halkUser,\n          content: \"Welcome to halk!\",\n          createdAt: timeNow,\n          id: \"\" + timeNow + Math.floor(Math.random() * (100000000 - 1000000 + 1) + 1000000),\n          read: false\n        }]\n      };\n      return halkChat;\n    }\n  }]);\n\n  return SocketController;\n}();\nexport function CreateSocketConnection(_ref3) {\n  var userId = _ref3.userId;\n  var socket = io(\"http://localhost:3000\", {\n    transports: [\"websocket\"],\n    auth: {\n      userId: userId\n    }\n  });\n  return socket;\n}","map":{"version":3,"names":["io","Cipher","SocketController","props","user","updateUser","chats","updateChats","socket","loadEvents","chat","emit","room","id","otherUser","userId","on","p","filter","c","map","messages","m","read","text","timeNow","Date","getTime","message","key","author","createdAt","content","Math","floor","random","newChat","toUser","thisChat","push","halkUser","phone","profile","name","username","avatar","require","bio","halkChat","CreateSocketConnection","transports","auth"],"sources":["/home/samuel/Documentos/projetos/mobile/halk/client/src/utils/socket.ts"],"sourcesContent":["import io from \"socket.io-client\";\nimport * as uuid from \"uuid\";\nimport { Cipher, Decipher } from \"../../middleware/crypto\";\n\nexport class SocketController {\n  constructor(props) {\n    this.user = props.user;\n    this.updateUser = props.updateUser;\n    this.chats = props.chats;\n    this.updateChats = props.updateChats;\n    this.socket = props.socket;\n\n    this.loadEvents();\n  }\n\n  public loadEvents() {\n    /*this.socket.on(\"receiveMessage\", (msg) => {\n      const chat = this.chats.filter((c) => c.id === msg.chat.id)[0];\n\n      if (chat) {\n        this.chats\n          .filter((c) => c.id === msg.chat.id)\n          .map((c) => c.messages.push(msg));\n        this.updateChats({ chats: this.chats });\n      }\n    });\n\n    this.socket.on(\"newChat\", ({ newChat }) => {\n      this.chats.push(newChat);\n      this.updateChats({ chats: this.chats });\n    });\n\n    this.socket.on(\"readMessage\", (payload) => {\n      const chat = this.chats.filter((c) => c.id === payload.chat.id)[0];\n      if (chat) {\n        chat.messages\n          .filter((m) => m.read === false)\n          .map((m) => (m.read = true));\n        this.updateChats({ chats: this.chats });\n      }\n    });*/\n  }\n\n  static joinedChat({chats, chat, socket}) {\n    socket.emit(\"joinRoom\", { room: chat.id, otherUser: chat.user.id });\n    socket.emit(\"verifyIfUserIsOnline\", { userId: chat.user.id });\n    socket.on(\"readMessage\", (p) => {\n      chats\n        .filter((c) => c.id === chat.id)\n        .map((c) => {\n          c.messages.map((m) => m.read === true);\n        });\n      updateChats({ chats });\n    });\n  }\n\n  static sendMessage({ user, chats, updateChats, chat, socket, text }) {\n    const timeNow = new Date().getTime();\n    const message = {\n      chat: {\n        id: chat.id,\n        key: chat.key,\n      },\n      author: user,\n      read: false,\n      createdAt: timeNow,\n      content: Cipher(text, chat.key),\n      id: `${timeNow}${Math.floor(\n        Math.random() * (100000000 - 1000000 + 1) + 1000000\n      )}`,\n    };\n\n    if (chat.newChat) {\n      socket.emit(\"sendMessage\", {\n        room: chat.id,\n        toUser: chat.user.id,\n        message,\n        newChat: true,\n        key: chat.key,\n      });\n      const thisChat = chats.filter((c) => c.id === chat.id)[0];\n      delete thisChat.newChat;\n      updateChats({ chats });\n    } else {\n      socket.emit(\"sendMessage\", {\n        room: chat.id,\n        toUser: chat.user.id,\n        message,\n      });\n    }\n\n    chats.filter((c) => c.id === chat.id).map((c) => c.messages.push(message));\n    updateChats({ chats });\n  }\n\n  static sendHalkMessage() {\n    const timeNow = new Date().getTime();\n    const halkUser = {\n      id: \"0\",\n      phone: \"+00\",\n      profile: {\n        name: \"Halk\",\n        username: \"Halk\",\n        avatar: require(\"../../assets/images/icon.png\"),\n        bio: \"Official account of the team Halk\",\n      },\n    };\n\n    const halkChat = {\n      id: \"a384b2bc-1a3b-49d3-bdf5-1be72350c494\",\n      user: halkUser,\n      key: \"0000\",\n      messages: [\n        {\n          author: halkUser,\n          content: \"Welcome to halk!\",\n          createdAt: timeNow,\n          id: `${timeNow}${Math.floor(\n            Math.random() * (100000000 - 1000000 + 1) + 1000000\n          )}`,\n          read: false,\n        },\n      ],\n    };\n\n    return halkChat;\n  }\n}\n\nexport function CreateSocketConnection({ userId }) {\n  const socket = io(\"http://localhost:3000\", {\n    transports: [\"websocket\"],\n    auth: {\n      userId,\n    },\n  });\n\n  return socket;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}