{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { Platform } from 'expo-modules-core';\nimport invariant from 'invariant';\nvar EventTypes = ['url'];\nvar listeners = [];\nexport default {\n  addEventListener: function addEventListener(type, listener) {\n    var _this = this;\n\n    if (!Platform.isDOMAvailable) {\n      return {\n        remove: function remove() {}\n      };\n    }\n\n    invariant(EventTypes.indexOf(type) !== -1, \"Linking.addEventListener(): \" + type + \" is not a valid event\");\n\n    var nativeListener = function nativeListener(nativeEvent) {\n      return listener({\n        url: window.location.href,\n        nativeEvent: nativeEvent\n      });\n    };\n\n    listeners.push({\n      listener: listener,\n      nativeListener: nativeListener\n    });\n    window.addEventListener('message', nativeListener, false);\n    return {\n      remove: function remove() {\n        _this.removeEventListener(type, listener);\n      }\n    };\n  },\n  removeEventListener: function removeEventListener(type, listener) {\n    if (!Platform.isDOMAvailable) {\n      return;\n    }\n\n    invariant(EventTypes.indexOf(type) !== -1, \"Linking.removeEventListener(): \" + type + \" is not a valid event.\");\n    var listenerIndex = listeners.findIndex(function (pair) {\n      return pair.listener === listener;\n    });\n    invariant(listenerIndex !== -1, 'Linking.removeEventListener(): cannot remove an unregistered event listener.');\n    var nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  },\n  canOpenURL: function () {\n    var _canOpenURL = _asyncToGenerator(function* (url) {\n      return true;\n    });\n\n    function canOpenURL(_x) {\n      return _canOpenURL.apply(this, arguments);\n    }\n\n    return canOpenURL;\n  }(),\n  getInitialURL: function () {\n    var _getInitialURL = _asyncToGenerator(function* () {\n      if (!Platform.isDOMAvailable) return '';\n      return window.location.href;\n    });\n\n    function getInitialURL() {\n      return _getInitialURL.apply(this, arguments);\n    }\n\n    return getInitialURL;\n  }(),\n  openURL: function () {\n    var _openURL = _asyncToGenerator(function* (url) {\n      if (Platform.isDOMAvailable) {\n        window.location = new URL(url, window.location).toString();\n      }\n    });\n\n    function openURL(_x2) {\n      return _openURL.apply(this, arguments);\n    }\n\n    return openURL;\n  }()\n};","map":{"version":3,"mappings":";AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAIA,IAAMC,UAAU,GAAG,CAAC,KAAD,CAAnB;AAEA,IAAMC,SAAS,GAAmE,EAAlF;AAEA,eAAe;EACbC,gBADa,4BACIC,IADJ,EACiBC,QADjB,EACsC;IAAA;;IAEjD,IAAI,CAACN,QAAQ,CAACO,cAAd,EAA8B;MAC5B,OAAO;QAAEC,MAAF,oBAAQ,CAAK;MAAb,CAAP;IACD;;IAEDP,SAAS,CACPC,UAAU,CAACO,OAAX,CAAmBJ,IAAnB,MAA6B,CAAC,CADvB,mCAEwBA,IAFxB,2BAAT;;IAIA,IAAMK,cAAc,GAAsB,SAApCA,cAAoC,CAACC,WAAD;MAAA,OACxCL,QAAQ,CAAC;QAAEM,GAAG,EAAEC,MAAM,CAACC,QAAP,CAAgBC,IAAvB;QAA6BJ,WAAW,EAAXA;MAA7B,CAAD,CADgC;IAAA,CAA1C;;IAEAR,SAAS,CAACa,IAAV,CAAe;MAAEV,QAAQ,EAARA,QAAF;MAAYI,cAAc,EAAdA;IAAZ,CAAf;IACAG,MAAM,CAACT,gBAAP,CAAwB,SAAxB,EAAmCM,cAAnC,EAAmD,KAAnD;IACA,OAAO;MACLF,MAAM,EAAE,kBAAK;QACX,KAAI,CAACS,mBAAL,CAAyBZ,IAAzB,EAA+BC,QAA/B;MACD;IAHI,CAAP;EAKD,CApBY;EAsBbW,mBAtBa,+BAsBOZ,IAtBP,EAsBoBC,QAtBpB,EAsByC;IAEpD,IAAI,CAACN,QAAQ,CAACO,cAAd,EAA8B;MAC5B;IACD;;IACDN,SAAS,CACPC,UAAU,CAACO,OAAX,CAAmBJ,IAAnB,MAA6B,CAAC,CADvB,sCAE2BA,IAF3B,4BAAT;IAIA,IAAMa,aAAa,GAAGf,SAAS,CAACgB,SAAV,CAAoB,UAACC,IAAD;MAAA,OAAUA,IAAI,CAACd,QAAL,KAAkBA,QAA5B;IAAA,CAApB,CAAtB;IACAL,SAAS,CACPiB,aAAa,KAAK,CAAC,CADZ,EAEP,8EAFO,CAAT;IAIA,IAAMR,cAAc,GAAGP,SAAS,CAACe,aAAD,CAAT,CAAyBR,cAAhD;IACAG,MAAM,CAACI,mBAAP,CAA2B,SAA3B,EAAsCP,cAAtC,EAAsD,KAAtD;IACAP,SAAS,CAACkB,MAAV,CAAiBH,aAAjB,EAAgC,CAAhC;EACD,CAvCY;EAyCPI,UAzCO;IAAA,+CAyCIV,GAzCJ,EAyCe;MAE1B,OAAO,IAAP;IACD,CA5CY;;IAAA;MAAA;IAAA;;IAAA;EAAA;EA8CPW,aA9CO;IAAA,oDA8CM;MACjB,IAAI,CAACvB,QAAQ,CAACO,cAAd,EAA8B,OAAO,EAAP;MAC9B,OAAOM,MAAM,CAACC,QAAP,CAAgBC,IAAvB;IACD,CAjDY;;IAAA;MAAA;IAAA;;IAAA;EAAA;EAmDPS,OAnDO;IAAA,4CAmDCZ,GAnDD,EAmDY;MACvB,IAAIZ,QAAQ,CAACO,cAAb,EAA6B;QAE3BM,MAAM,CAACC,QAAP,GAAkB,IAAIW,GAAJ,CAAQb,GAAR,EAAaC,MAAM,CAACC,QAApB,EAA8BY,QAA9B,EAAlB;MACD;IACF,CAxDY;;IAAA;MAAA;IAAA;;IAAA;EAAA;AAAA,CAAf","names":["Platform","invariant","EventTypes","listeners","addEventListener","type","listener","isDOMAvailable","remove","indexOf","nativeListener","nativeEvent","url","window","location","href","push","removeEventListener","listenerIndex","findIndex","pair","splice","canOpenURL","getInitialURL","openURL","URL","toString"],"sourceRoot":"","sources":["../src/ExpoLinking.web.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport invariant from 'invariant';\n\nimport { NativeURLListener, URLListener } from './Linking.types';\n\nconst EventTypes = ['url'];\n\nconst listeners: { listener: URLListener; nativeListener: NativeURLListener }[] = [];\n\nexport default {\n  addEventListener(type: 'url', listener: URLListener): { remove(): void } {\n    // Do nothing in Node.js environments\n    if (!Platform.isDOMAvailable) {\n      return { remove() {} };\n    }\n\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.addEventListener(): ${type} is not a valid event`\n    );\n    const nativeListener: NativeURLListener = (nativeEvent) =>\n      listener({ url: window.location.href, nativeEvent });\n    listeners.push({ listener, nativeListener });\n    window.addEventListener('message', nativeListener, false);\n    return {\n      remove: () => {\n        this.removeEventListener(type, listener);\n      },\n    };\n  },\n\n  removeEventListener(type: 'url', listener: URLListener): void {\n    // Do nothing in Node.js environments\n    if (!Platform.isDOMAvailable) {\n      return;\n    }\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.removeEventListener(): ${type} is not a valid event.`\n    );\n    const listenerIndex = listeners.findIndex((pair) => pair.listener === listener);\n    invariant(\n      listenerIndex !== -1,\n      'Linking.removeEventListener(): cannot remove an unregistered event listener.'\n    );\n    const nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  },\n\n  async canOpenURL(url: string): Promise<boolean> {\n    // In reality this should be able to return false for links like `chrome://` on chrome.\n    return true;\n  },\n\n  async getInitialURL(): Promise<string> {\n    if (!Platform.isDOMAvailable) return '';\n    return window.location.href;\n  },\n\n  async openURL(url: string): Promise<void> {\n    if (Platform.isDOMAvailable) {\n      // @ts-ignore\n      window.location = new URL(url, window.location).toString();\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"module"}