{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport io from \"socket.io-client\";\nimport * as uuid from \"uuid\";\nimport { Cipher } from \"../../middleware/crypto\";\nexport var readMessages = function readMessages(_ref) {\n  var chats = _ref.chats,\n      updateChats = _ref.updateChats,\n      chat = _ref.chat;\n  chats.filter(function (c) {\n    return c.id === chat.id;\n  }).map(function (c) {\n    return c.messages;\n  }).map(function (m) {\n    return m.read = true;\n  });\n  updateChats({\n    chats: chats\n  });\n};\nexport var SocketController = function () {\n  function SocketController(props) {\n    _classCallCheck(this, SocketController);\n\n    this.user = props.user;\n    this.updateUser = props.updateUser;\n    this.chats = props.chats;\n    this.updateChats = props.updateChats;\n    this.socket = props.socket;\n    this.loadEvents();\n  }\n\n  _createClass(SocketController, [{\n    key: \"loadEvents\",\n    value: function loadEvents() {\n      var _this = this;\n\n      this.socket.on(\"receiveMessage\", function (msg) {\n        var chat = _this.chats.filter(function (c) {\n          return c.id === msg.chat.id;\n        })[0];\n\n        if (chat) {\n          _this.chats.filter(function (c) {\n            return c.id === msg.chat.id;\n          }).map(function (c) {\n            return c.messages.push(msg);\n          });\n\n          _this.updateChats({\n            chats: _this.chats\n          });\n        }\n      });\n      this.socket.on(\"newChat\", function (_ref2) {\n        var newChat = _ref2.newChat;\n\n        _this.chats.push(newChat);\n\n        _this.updateChats({\n          chats: _this.chats\n        });\n      });\n      this.socket.on(\"readMessage\", function (payload) {\n        var chat = _this.chats.filter(function (c) {\n          return c.id === payload.chat.id;\n        })[0];\n\n        if (chat) {\n          chat.messages.filter(function (m) {\n            return m.read === false;\n          }).map(function (m) {\n            return m.read = true;\n          });\n\n          _this.updateChats({\n            chats: _this.chats\n          });\n        }\n      });\n    }\n  }], [{\n    key: \"joinedChat\",\n    value: function joinedChat(_ref3) {\n      var chats = _ref3.chats,\n          updateChats = _ref3.updateChats,\n          chat = _ref3.chat,\n          socket = _ref3.socket;\n      socket.emit(\"joinRoom\", {\n        room: chat.id,\n        otherUser: chat.user.id\n      });\n      socket.emit(\"verifyIfUserIsOnline\", {\n        userId: chat.user.id\n      });\n      socket.on(\"readMessage\", function (p) {\n        return readMessages({\n          chats: chats,\n          updateChats: updateChats,\n          chat: chat\n        });\n      });\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(_ref4) {\n      var user = _ref4.user,\n          chats = _ref4.chats,\n          updateChats = _ref4.updateChats,\n          chat = _ref4.chat,\n          socket = _ref4.socket,\n          text = _ref4.text;\n      var timeNow = new Date().getTime();\n      var message = {\n        chat: {\n          id: chat.id\n        },\n        author: user,\n        createdAt: timeNow,\n        content: Cipher(text, chat.id),\n        id: \"\" + timeNow + Math.floor(Math.random() * (100000000 - 1000000 + 1) + 1000000)\n      };\n\n      if (chat.newChat) {\n        socket.emit(\"sendMessage\", {\n          room: chat.id,\n          toUser: chat.user.id,\n          message: message,\n          newChat: true\n        });\n        var thisChat = chats.filter(function (c) {\n          return c.id === chat.id;\n        })[0];\n        delete thisChat.newChat;\n        updateChats({\n          chats: chats\n        });\n      } else {\n        socket.emit(\"sendMessage\", {\n          room: chat.id,\n          toUser: chat.user.id,\n          message: message\n        });\n      }\n\n      updateChats({\n        chats: chats\n      });\n      readMessages({\n        chats: chats,\n        updateChats: updateChats,\n        chat: chat\n      });\n    }\n  }, {\n    key: \"getHalkChat\",\n    value: function getHalkChat() {\n      var timeNow = new Date().getTime();\n      var user = {\n        id: uuid.v4(),\n        phone: \"\",\n        profile: {\n          name: \"Halk\",\n          username: \"Halk team\",\n          avatar: \"https://imgur.com/YPIViUK.png\",\n          bio: \"Official account of the team Halk\"\n        }\n      };\n      var chat = {\n        id: uuid.v4(),\n        user: user,\n        messages: [{\n          author: user,\n          content: \"Welcome to halk!\",\n          createdAt: timeNow,\n          id: \"\" + timeNow + Math.floor(Math.random() * (100000000 - 1000000 + 1) + 1000000),\n          read: false\n        }]\n      };\n      return chat;\n    }\n  }]);\n\n  return SocketController;\n}();\nexport function CreateSocketConnection(_ref5) {\n  var userId = _ref5.userId;\n  if (!userId) return;\n  var socket = io(\"http://localhost:3000/\", {\n    transports: [\"websocket\"],\n    auth: {\n      userId: userId\n    }\n  });\n  return socket;\n}","map":{"version":3,"names":["io","uuid","Cipher","readMessages","chats","updateChats","chat","filter","c","id","map","messages","m","read","SocketController","props","user","updateUser","socket","loadEvents","on","msg","push","newChat","payload","emit","room","otherUser","userId","p","text","timeNow","Date","getTime","message","author","createdAt","content","Math","floor","random","toUser","thisChat","v4","phone","profile","name","username","avatar","bio","CreateSocketConnection","transports","auth"],"sources":["/home/samuel/Documentos/projetos/mobile/halk/client/src/utils/socket.ts"],"sourcesContent":["import io from \"socket.io-client\";\nimport * as uuid from \"uuid\";\nimport { Cipher, Decipher } from \"../../middleware/crypto\";\n\nexport const readMessages = ({ chats, updateChats, chat }) => {\n  chats\n    .filter((c) => c.id === chat.id)\n    .map((c) => c.messages)\n    .map((m) => (m.read = true));\n  updateChats({ chats });\n};\n\nexport class SocketController {\n  constructor(props) {\n    this.user = props.user;\n    this.updateUser = props.updateUser;\n    this.chats = props.chats;\n    this.updateChats = props.updateChats;\n    this.socket = props.socket;\n\n    this.loadEvents();\n  }\n\n  public loadEvents() {\n    this.socket.on(\"receiveMessage\", (msg) => {\n      const chat = this.chats.filter((c) => c.id === msg.chat.id)[0];\n\n      if (chat) {\n        this.chats\n          .filter((c) => c.id === msg.chat.id)\n          .map((c) => c.messages.push(msg));\n        this.updateChats({ chats: this.chats });\n      }\n    });\n\n    this.socket.on(\"newChat\", ({ newChat }) => {\n      this.chats.push(newChat);\n      this.updateChats({ chats: this.chats });\n    });\n\n    this.socket.on(\"readMessage\", (payload) => {\n      const chat = this.chats.filter((c) => c.id === payload.chat.id)[0];\n      if (chat) {\n        chat.messages\n          .filter((m) => m.read === false)\n          .map((m) => (m.read = true));\n        this.updateChats({ chats: this.chats });\n      }\n    });\n  }\n\n  static joinedChat({ chats, updateChats, chat, socket }) {\n    socket.emit(\"joinRoom\", { room: chat.id, otherUser: chat.user.id });\n    socket.emit(\"verifyIfUserIsOnline\", { userId: chat.user.id });\n    socket.on(\"readMessage\", (p) => readMessages({ chats, updateChats, chat }));\n  }\n\n  static sendMessage({ user, chats, updateChats, chat, socket, text }) {\n    const timeNow = new Date().getTime();\n    const message = {\n      chat: {\n        id: chat.id,\n      },\n      author: user,\n      createdAt: timeNow,\n      content: Cipher(text, chat.id),\n      id: `${timeNow}${Math.floor(\n        Math.random() * (100000000 - 1000000 + 1) + 1000000\n      )}`,\n    };\n\n    if (chat.newChat) {\n      socket.emit(\"sendMessage\", {\n        room: chat.id,\n        toUser: chat.user.id,\n        message,\n        newChat: true,\n      });\n      const thisChat = chats.filter((c) => c.id === chat.id)[0];\n      delete thisChat.newChat;\n      updateChats({ chats });\n    } else {\n      socket.emit(\"sendMessage\", {\n        room: chat.id,\n        toUser: chat.user.id,\n        message,\n      });\n    }\n\n    updateChats({ chats });\n    readMessages({ chats, updateChats, chat });\n  }\n\n  static getHalkChat() {\n    const timeNow = new Date().getTime();\n\n    const user = {\n      id: uuid.v4(),\n      phone: \"\",\n      profile: {\n        name: \"Halk\",\n        username: \"Halk team\",\n        avatar: \"https://imgur.com/YPIViUK.png\",\n        bio: \"Official account of the team Halk\",\n      },\n    };\n\n    const chat = {\n      id: uuid.v4(),\n      user,\n      messages: [\n        {\n          author: user,\n          content: \"Welcome to halk!\",\n          createdAt: timeNow,\n          id: `${timeNow}${Math.floor(\n            Math.random() * (100000000 - 1000000 + 1) + 1000000\n          )}`,\n          read: false,\n        },\n      ],\n    };\n\n    return chat;\n  }\n}\n\nexport function CreateSocketConnection({ userId }) {\n  if (!userId) return;\n  const socket = io(\"http://localhost:3000/\", {\n    transports: [\"websocket\"],\n    auth: {\n      userId,\n    },\n  });\n\n  return socket;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}